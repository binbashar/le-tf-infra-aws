[12:07:37.631] INFO     Checking for local docker image, tag:                            
                        1.9.1-tofu-0.3.0-1000-1000...                                    
[12:07:37.659] INFO     âœ” OK                                                             
                                                                                         
[12:07:38.548] INFO     Attempting to get temporary credentials for security account.    
[12:07:38.550] INFO     Using already configured temporary credentials.                  
[12:07:38.552] INFO     Attempting to get temporary credentials for network account.     
[12:07:38.553] INFO     Using already configured temporary credentials.                  
[12:07:38.555] INFO     Attempting to get temporary credentials for management account.  
[12:07:38.556] INFO     Using already configured temporary credentials.                  
[12:07:38.557] INFO     Attempting to get temporary credentials for apps-devstg account. 
[12:07:38.559] INFO     Using already configured temporary credentials.                  
[12:07:38.560] INFO     Attempting to get temporary credentials for apps-prd account.    
[12:07:38.561] INFO     Using already configured temporary credentials.                  
[12:07:38.563] INFO     Attempting to get temporary credentials for shared account.      
[12:07:38.564] INFO     Using already configured temporary credentials.                  
[12:07:38.565] INFO     Attempting to get temporary credentials for shared account.      
[12:07:38.566] INFO     Using already configured temporary credentials.                  
[12:07:38.568] INFO     Attempting to get temporary credentials for data-science account.
[12:07:38.569] INFO     Using already configured temporary credentials.                  
module.base_tf_backend["network"].data.aws_region.current: Reading...
module.base_tf_backend["apps-devstg"].data.aws_region.current: Reading...
module.base_tf_backend["apps-prd"].data.aws_region.current: Reading...
module.base_tf_backend["apps-prd"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["security"].data.aws_region.current: Reading...
module.base_tf_backend["shared"].data.aws_region.current: Reading...
module.base_tf_backend["apps-devstg"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["security"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["shared"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["data-science"].data.aws_region.current: Reading...
module.base_tf_backend["network"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["data-science"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["management"].data.aws_region.current: Reading...
module.base_tf_backend["management"].data.aws_region.current: Read complete after 0s [id=us-east-1]

OpenTofu used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

OpenTofu will perform the following actions:

  # module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-apps-devstg-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "apps-devstg"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "apps-devstg"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-apps-devstg-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-apps-devstg-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-apps-devstg-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["apps-devstg"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-apps-devstg-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-apps-devstg-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "apps-devstg"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "apps-devstg"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-apps-devstg-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "apps-devstg"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "apps-devstg"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-apps-devstg-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-devstg"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-apps-prd-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "apps-prd"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "apps-prd"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-apps-prd-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-apps-prd-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-apps-prd-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["apps-prd"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-apps-prd-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-apps-prd-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "apps-prd"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "apps-prd"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-apps-prd-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "apps-prd"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "apps-prd"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-apps-prd-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-prd"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.base_tf_backend["data-science"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["data-science"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["data-science"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-data-science-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "data-science"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "data-science"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-data-science-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-data-science-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-data-science-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["data-science"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-data-science-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-data-science-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "data-science"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "data-science"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-data-science-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "data-science"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "data-science"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-data-science-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["data-science"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.base_tf_backend["management"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["management"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["management"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["management"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-management-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["management"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-management-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["management"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-management-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-management-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["management"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-management-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-management-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-management-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["management"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["management"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-management-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["management"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.base_tf_backend["network"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["network"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["network"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["network"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-network-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "network"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "network"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["network"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-network-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["network"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-network-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-network-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["network"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-network-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["network"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-network-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "network"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "network"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["network"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-network-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "network"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "network"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["network"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["network"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["network"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["network"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["network"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-network-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["network"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.base_tf_backend["security"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["security"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["security"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["security"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-security-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "security"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "security"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["security"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-security-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["security"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-security-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-security-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["security"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-security-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["security"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-security-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "security"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "security"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["security"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-security-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "security"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "security"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["security"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["security"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["security"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["security"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["security"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-security-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["security"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

  # module.base_tf_backend["shared"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["shared"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["shared"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-shared-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "shared"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "shared"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["shared"].aws_iam_policy.bucket_replication[0] will be created
  + resource "aws_iam_policy" "bucket_replication" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + id               = (known after apply)
      + name             = "bb-shared-terraform-backend-bucket-replication"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = (known after apply)
      + policy_id        = (known after apply)
      + tags_all         = (known after apply)
    }

  # module.base_tf_backend["shared"].aws_iam_policy_attachment.bucket_replication[0] will be created
  + resource "aws_iam_policy_attachment" "bucket_replication" {
      + id         = (known after apply)
      + name       = "bb-shared-terraform-backend-role-policy-attachment"
      + policy_arn = (known after apply)
      + roles      = [
          + "bb-shared-terraform-backend-bucket-replication",
        ]
    }

  # module.base_tf_backend["shared"].aws_iam_role.bucket_replication[0] will be created
  + resource "aws_iam_role" "bucket_replication" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "s3.amazonaws.com"
                        }
                      + Sid       = ""
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "bb-shared-terraform-backend-bucket-replication"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket.default will be created
  + resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-shared-terraform-backend"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "shared"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "shared"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket.replication_bucket[0] will be created
  + resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "bb-shared-terraform-backend-replica"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Environment" = "shared"
          + "Terraform"   = "true"
        }
      + tags_all                    = {
          + "Environment" = "shared"
          + "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_policy.bucket_replication[0] will be created
  + resource "aws_s3_bucket_policy" "bucket_replication" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_policy.default[0] will be created
  + resource "aws_s3_bucket_policy" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + policy = (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.default will be created
  + resource "aws_s3_bucket_public_access_block" "default" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.replication_bucket[0] will be created
  + resource "aws_s3_bucket_public_access_block" "replication_bucket" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.default will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      + bucket = "bb-shared-terraform-backend"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_versioning.default will be created
  + resource "aws_s3_bucket_versioning" "default" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = "Disabled"
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_versioning.replication_bucket[0] will be created
  + resource "aws_s3_bucket_versioning" "replication_bucket" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

  # module.base_tf_backend["shared"].time_sleep.wait_30_secs will be created
  + resource "time_sleep" "wait_30_secs" {
      + create_duration = "30s"
      + id              = (known after apply)
    }

Plan: 112 to add, 0 to change, 0 to destroy.

Warning: Value for undeclared variable

The root module does not declare a variable named "profile" but a value was found in file "/binbash/baseline/config/backend.tfvars". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.

Warning: Value for undeclared variable

The root module does not declare a variable named "dynamodb_table" but a value was found in file "/binbash/baseline/config/backend.tfvars". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.

Warning: Values for undeclared variables

In addition to the other similar warnings shown, 3 other variable(s) defined without being declared.

Warning: Invalid Attribute Combination

  with module.base_tf_backend.aws_s3_bucket_lifecycle_configuration.replication_bucket,
  on .terraform/modules/base_tf_backend/bucket_replication.tf line 89, in resource "aws_s3_bucket_lifecycle_configuration" "replication_bucket":
  89: resource "aws_s3_bucket_lifecycle_configuration" "replication_bucket" {

No attribute specified when one (and only one) of [rule[0].filter,rule[0].prefix] is required

This will be an error in a future version of the provider

(and 3 more similar warnings elsewhere)



Note: You didn't use the -out option to save this plan, so OpenTofu can't guarantee to take exactly these actions if you run "tofu apply" now.
