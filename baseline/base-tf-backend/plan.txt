[18:42:20.989] INFO     Checking for local docker image, tag: 1.9.1-tofu-0.3.0-1000-1000...                                            
[18:42:21.021] INFO     âœ” OK                                                                                                           
                                                                                                                                       
[18:42:21.891] INFO     Attempting to get temporary credentials for management account.                                                
[18:42:21.893] INFO     Using already configured temporary credentials.                                                                
[18:42:21.895] INFO     Attempting to get temporary credentials for shared account.                                                    
[18:42:21.897] INFO     Using already configured temporary credentials.                                                                
[18:42:21.899] INFO     Attempting to get temporary credentials for apps-devstg account.                                               
[18:42:21.902] INFO     Using already configured temporary credentials.                                                                
[18:42:21.904] INFO     Attempting to get temporary credentials for network account.                                                   
[18:42:21.905] INFO     Using already configured temporary credentials.                                                                
[18:42:21.907] INFO     Attempting to get temporary credentials for security account.                                                  
[18:42:21.908] INFO     Using already configured temporary credentials.                                                                
[18:42:21.910] INFO     Attempting to get temporary credentials for apps-prd account.                                                  
[18:42:21.911] INFO     Using already configured temporary credentials.                                                                
[18:42:21.912] INFO     Attempting to get temporary credentials for shared account.                                                    
[18:42:21.914] INFO     Using already configured temporary credentials.                                                                
[18:42:21.916] INFO     Attempting to get temporary credentials for data-science account.                                              
[18:42:21.918] INFO     Using already configured temporary credentials.                                                                
module.base_tf_backend["network"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-network-terraform-backend-bucket-replication]
module.base_tf_backend["apps-devstg"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-apps-devstg-terraform-backend-bucket-replication]
module.base_tf_backend["network"].data.aws_region.current: Reading...
module.base_tf_backend["apps-devstg"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend-bucket-replication]
module.base_tf_backend["network"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-network-terraform-backend-bucket-replication]
module.base_tf_backend["apps-devstg"].data.aws_region.current: Reading...
module.base_tf_backend["network"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["network"].aws_dynamodb_table.without_server_side_encryption[0]: Preparing import... [id=bb-network-terraform-backend]
module.base_tf_backend["apps-devstg"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["security"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-security-terraform-backend-bucket-replication]
module.base_tf_backend["shared"].data.aws_region.current: Reading...
module.base_tf_backend["security"].data.aws_region.current: Reading...
module.base_tf_backend["network"].aws_dynamodb_table.without_server_side_encryption[0]: Refreshing state... [id=bb-network-terraform-backend]
module.base_tf_backend["shared"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["security"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-security-terraform-backend-bucket-replication]
module.base_tf_backend["security"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["security"].aws_dynamodb_table.without_server_side_encryption[0]: Preparing import... [id=bb-security-terraform-backend]
module.base_tf_backend["shared"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-shared-terraform-backend-bucket-replication-module]
module.base_tf_backend["security"].aws_dynamodb_table.without_server_side_encryption[0]: Refreshing state... [id=bb-security-terraform-backend]
module.base_tf_backend["shared"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-shared-terraform-backend-bucket-replication-module]
module.base_tf_backend["apps-prd"].data.aws_region.current: Reading...
module.base_tf_backend["apps-prd"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["data-science"].data.aws_region.current: Reading...
module.base_tf_backend["shared"].aws_dynamodb_table.without_server_side_encryption[0]: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["data-science"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["shared"].aws_dynamodb_table.without_server_side_encryption[0]: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_dynamodb_table.without_server_side_encryption[0]: Preparing import... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["management"].data.aws_region.current: Reading...
module.base_tf_backend["apps-devstg"].aws_dynamodb_table.without_server_side_encryption[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["management"].data.aws_region.current: Read complete after 0s [id=us-east-1]
module.base_tf_backend["apps-prd"].aws_dynamodb_table.without_server_side_encryption[0]: Preparing import... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["apps-prd"].aws_dynamodb_table.without_server_side_encryption[0]: Refreshing state... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["data-science"].aws_dynamodb_table.without_server_side_encryption[0]: Preparing import... [id=bb-data-science-terraform-backend]
module.base_tf_backend["data-science"].aws_dynamodb_table.without_server_side_encryption[0]: Refreshing state... [id=bb-data-science-terraform-backend]
module.base_tf_backend["apps-prd"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-apps-prd-terraform-backend-bucket-replication]
module.base_tf_backend["apps-prd"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-apps-prd-terraform-backend-bucket-replication]
module.base_tf_backend["data-science"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-data-science-terraform-backend-bucket-replication]
module.base_tf_backend["data-science"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-data-science-terraform-backend-bucket-replication]
module.base_tf_backend["management"].aws_iam_role.bucket_replication[0]: Preparing import... [id=bb-root-terraform-backend-bucket-replication]
module.base_tf_backend["management"].aws_iam_role.bucket_replication[0]: Refreshing state... [id=bb-root-terraform-backend-bucket-replication]
module.base_tf_backend["shared"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket.replication_bucket[0]: Preparing import... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket.replication_bucket[0]: Refreshing state... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket.default: Preparing import... [id=bb-security-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket.default: Preparing import... [id=bb-data-science-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket.default: Preparing import... [id=bb-root-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket.default: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket.default: Preparing import... [id=bb-network-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket.default: Preparing import... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket.default: Preparing import... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket.default: Refreshing state... [id=bb-data-science-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket.default: Refreshing state... [id=bb-root-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket.default: Refreshing state... [id=bb-security-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket.default: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket.default: Refreshing state... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket.default: Refreshing state... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket.default: Refreshing state... [id=bb-network-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_versioning.replication_bucket[0]: Preparing import... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_versioning.replication_bucket[0]: Refreshing state... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_public_access_block.replication_bucket[0]: Preparing import... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_public_access_block.replication_bucket[0]: Refreshing state... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["network"].data.aws_iam_policy_document.default-ssl: Reading...
module.base_tf_backend["data-science"].data.aws_iam_policy_document.default-ssl: Reading...
module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.default-ssl: Reading...
module.base_tf_backend["data-science"].data.aws_iam_policy_document.default-ssl: Read complete after 0s [id=2003822905]
module.base_tf_backend["network"].data.aws_iam_policy_document.default-ssl: Read complete after 0s [id=1256364257]
module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.default-ssl: Read complete after 0s [id=1295115816]
module.base_tf_backend["security"].data.aws_iam_policy_document.default-ssl: Reading...
module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.default-ssl: Reading...
module.base_tf_backend["security"].data.aws_iam_policy_document.default-ssl: Read complete after 0s [id=2913786012]
module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.default-ssl: Read complete after 0s [id=4225281203]
module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.default-ssl-vpc: Reading...
module.base_tf_backend["data-science"].data.aws_iam_policy_document.default-ssl-vpc: Reading...
module.base_tf_backend["data-science"].data.aws_iam_policy_document.default-ssl-vpc: Read complete after 0s [id=1058783944]
module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.default-ssl-vpc: Read complete after 0s [id=572610631]
module.base_tf_backend["network"].data.aws_iam_policy_document.default-ssl-vpc: Reading...
module.base_tf_backend["security"].data.aws_iam_policy_document.default-ssl-vpc: Reading...
module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.default-ssl-vpc: Reading...
module.base_tf_backend["network"].data.aws_iam_policy_document.default-ssl-vpc: Read complete after 0s [id=1382197413]
module.base_tf_backend["management"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-root-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-root-terraform-backend]
module.base_tf_backend["security"].data.aws_iam_policy_document.default-ssl-vpc: Read complete after 0s [id=3705658410]
module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.default-ssl-vpc: Read complete after 0s [id=2870517468]
module.base_tf_backend["shared"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-data-science-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-data-science-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-security-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-security-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_versioning.default: Preparing import... [id=bb-network-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_versioning.default: Refreshing state... [id=bb-network-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-data-science-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-security-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-data-science-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-security-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-root-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-root-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-network-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-network-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.default: Preparing import... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.default: Refreshing state... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.bucket_replication[0]: Reading...
module.base_tf_backend["apps-prd"].data.aws_iam_policy_document.bucket_replication[0]: Read complete after 0s [id=1910255310]
module.base_tf_backend["network"].data.aws_iam_policy_document.bucket_replication[0]: Reading...
module.base_tf_backend["security"].data.aws_iam_policy_document.bucket_replication[0]: Reading...
module.base_tf_backend["security"].data.aws_iam_policy_document.bucket_replication[0]: Read complete after 0s [id=2920966486]
module.base_tf_backend["network"].data.aws_iam_policy_document.bucket_replication[0]: Read complete after 0s [id=2960261984]
module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.bucket_replication[0]: Reading...
module.base_tf_backend["apps-devstg"].data.aws_iam_policy_document.bucket_replication[0]: Read complete after 0s [id=4173155100]
module.base_tf_backend["data-science"].data.aws_iam_policy_document.bucket_replication[0]: Reading...
module.base_tf_backend["data-science"].data.aws_iam_policy_document.bucket_replication[0]: Read complete after 0s [id=3887869635]
module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-root-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-root-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-network-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-network-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-data-science-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Preparing import... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0]: Refreshing state... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-data-science-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.default: Preparing import... [id=bb-security-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.default: Refreshing state... [id=bb-security-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_replication_configuration.this[0]: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_replication_configuration.this[0]: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["data-science"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["shared"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["data-science"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["shared"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["apps-devstg"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["apps-devstg"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["security"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["apps-prd"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["management"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["security"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["apps-prd"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["management"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["network"].time_sleep.wait_30_secs: Preparing import... [id=30s,]
module.base_tf_backend["network"].time_sleep.wait_30_secs: Refreshing state... [id=2025-10-01T16:42:57Z]
module.base_tf_backend["management"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-root-terraform-backend]
module.base_tf_backend["network"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-network-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::523857393444:policy/bb-apps-devstg-terraform-backend-bucket-replication]
module.base_tf_backend["network"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-network-terraform-backend]
module.base_tf_backend["management"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-root-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend]
module.base_tf_backend["apps-devstg"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::523857393444:policy/bb-apps-devstg-terraform-backend-bucket-replication]
module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-security-terraform-backend]
module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-apps-prd-terraform-backend]
module.base_tf_backend["security"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-security-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-data-science-terraform-backend]
module.base_tf_backend["data-science"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-data-science-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_policy.default[0]: Preparing import... [id=bb-shared-terraform-backend]
module.base_tf_backend["shared"].aws_s3_bucket_policy.default[0]: Refreshing state... [id=bb-shared-terraform-backend]
module.base_tf_backend["network"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::822280187662:policy/bb-network-terraform-backend-bucket-replication]
module.base_tf_backend["network"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::822280187662:policy/bb-network-terraform-backend-bucket-replication]
module.base_tf_backend["management"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::754065527950:policy/bb-root-terraform-backend-bucket-replication]
module.base_tf_backend["data-science"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::905418344519:policy/bb-data-science-terraform-backend-bucket-replication]
module.base_tf_backend["management"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::754065527950:policy/bb-root-terraform-backend-bucket-replication]
module.base_tf_backend["data-science"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::905418344519:policy/bb-data-science-terraform-backend-bucket-replication]
module.base_tf_backend["apps-prd"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::802787198489:policy/bb-apps-prd-terraform-backend-bucket-replication]
module.base_tf_backend["apps-prd"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::802787198489:policy/bb-apps-prd-terraform-backend-bucket-replication]
module.base_tf_backend["security"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::900980591242:policy/bb-security-terraform-backend-bucket-replication]
module.base_tf_backend["security"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::900980591242:policy/bb-security-terraform-backend-bucket-replication]
module.base_tf_backend["shared"].aws_iam_policy.bucket_replication[0]: Preparing import... [id=arn:aws:iam::763606934258:policy/bb-shared-terraform-backend-bucket-replication]
module.base_tf_backend["shared"].aws_iam_policy.bucket_replication[0]: Refreshing state... [id=arn:aws:iam::763606934258:policy/bb-shared-terraform-backend-bucket-replication]
module.base_tf_backend["management"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["management"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-root-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["network"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-network-terraform-backend-replica]
module.base_tf_backend["security"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-security-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["shared"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-shared-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-apps-devstg-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-apps-prd-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_policy.bucket_replication[0]: Preparing import... [id=bb-data-science-terraform-backend-replica]
module.base_tf_backend["data-science"].aws_s3_bucket_policy.bucket_replication[0]: Refreshing state... [id=bb-data-science-terraform-backend-replica]

OpenTofu used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
-/+ destroy and then create replacement
 <= read (data resources)

OpenTofu planned the following actions, but then encountered a problem:

  # module.base_tf_backend["apps-devstg"].aws_dynamodb_table.without_server_side_encryption[0] will be imported
    resource "aws_dynamodb_table" "without_server_side_encryption" {
        arn                         = "arn:aws:dynamodb:us-east-1:523857393444:table/bb-apps-devstg-terraform-backend"
        billing_mode                = "PROVISIONED"
        deletion_protection_enabled = false
        hash_key                    = "LockID"
        id                          = "bb-apps-devstg-terraform-backend"
        name                        = "bb-apps-devstg-terraform-backend"
        read_capacity               = 5
        stream_enabled              = false
        table_class                 = "STANDARD"
        tags                        = {
            "Environment" = "apps-devstg"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "apps-devstg"
            "Terraform"   = "true"
        }
        write_capacity              = 5

        attribute {
            name = "LockID"
            type = "S"
        }

        point_in_time_recovery {
            enabled                 = false
            recovery_period_in_days = 0
        }

        ttl {
            enabled = false
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_iam_policy.bucket_replication[0] will be imported
    resource "aws_iam_policy" "bucket_replication" {
        arn              = "arn:aws:iam::523857393444:policy/bb-apps-devstg-terraform-backend-bucket-replication"
        attachment_count = 1
        id               = "arn:aws:iam::523857393444:policy/bb-apps-devstg-terraform-backend-bucket-replication"
        name             = "bb-apps-devstg-terraform-backend-bucket-replication"
        path             = "/"
        policy           = jsonencode(
            {
                Statement = [
                    {
                        Action   = [
                            "s3:ListBucket",
                            "s3:GetReplicationConfiguration",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-apps-devstg-terraform-backend"
                        Sid      = "1"
                    },
                    {
                        Action   = [
                            "s3:GetObjectVersionForReplication",
                            "s3:GetObjectVersionAcl",
                            "s3:GetObjectVersion",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-apps-devstg-terraform-backend/*"
                        Sid      = "2"
                    },
                    {
                        Action   = [
                            "s3:ReplicateTags",
                            "s3:ReplicateObject",
                            "s3:ReplicateDelete",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-apps-devstg-terraform-backend-replica/*"
                        Sid      = "6"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        policy_id        = "ANPAXT6CVO4SFOLFB2O5S"
        tags             = {}
        tags_all         = {}
    }

  # module.base_tf_backend["apps-devstg"].aws_iam_role.bucket_replication[0] will be imported
    resource "aws_iam_role" "bucket_replication" {
        arn                   = "arn:aws:iam::523857393444:role/bb-apps-devstg-terraform-backend-bucket-replication"
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        create_date           = "2024-04-16T22:28:44Z"
        force_detach_policies = false
        id                    = "bb-apps-devstg-terraform-backend-bucket-replication"
        managed_policy_arns   = [
            "arn:aws:iam::523857393444:policy/bb-apps-devstg-terraform-backend-bucket-replication",
        ]
        max_session_duration  = 3600
        name                  = "bb-apps-devstg-terraform-backend-bucket-replication"
        path                  = "/"
        tags                  = {}
        tags_all              = {}
        unique_id             = "AROAXT6CVO4SFILB2ZIT2"
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket.default will be imported
    resource "aws_s3_bucket" "default" {
        arn                         = "arn:aws:s3:::bb-apps-devstg-terraform-backend"
        bucket                      = "bb-apps-devstg-terraform-backend"
        bucket_domain_name          = "bb-apps-devstg-terraform-backend.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-apps-devstg-terraform-backend.s3.us-east-1.amazonaws.com"
        hosted_zone_id              = "Z3AQBSTGFYJSTF"
        id                          = "bb-apps-devstg-terraform-backend"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-apps-devstg-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-1"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "apps-devstg"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "apps-devstg"
            "Terraform"   = "true"
        }

        grant {
            id          = "3a99800a2e08b1bb876a6ad0ec19d8b17ea74e1078b140933364b23d1545538a"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        replication_configuration {
            role = "arn:aws:iam::523857393444:role/bb-apps-devstg-terraform-backend-bucket-replication"

            rules {
                id       = "standard_bucket_replication"
                priority = 0
                status   = "Enabled"

                destination {
                    bucket        = "arn:aws:s3:::bb-apps-devstg-terraform-backend-replica"
                    storage_class = "STANDARD"
                }
            }
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket.replication_bucket[0] will be imported
    resource "aws_s3_bucket" "replication_bucket" {
        arn                         = "arn:aws:s3:::bb-apps-devstg-terraform-backend-replica"
        bucket                      = "bb-apps-devstg-terraform-backend-replica"
        bucket_domain_name          = "bb-apps-devstg-terraform-backend-replica.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-apps-devstg-terraform-backend-replica.s3.us-east-2.amazonaws.com"
        hosted_zone_id              = "Z2O1EMRO9K5GLX"
        id                          = "bb-apps-devstg-terraform-backend-replica"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-apps-devstg-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-2"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "apps-devstg"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "apps-devstg"
            "Terraform"   = "true"
        }

        grant {
            id          = "3a99800a2e08b1bb876a6ad0ec19d8b17ea74e1078b140933364b23d1545538a"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.bucket_replication[0] will be imported
    resource "aws_s3_bucket_policy" "bucket_replication" {
        bucket = "bb-apps-devstg-terraform-backend-replica"
        id     = "bb-apps-devstg-terraform-backend-replica"
        policy = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-apps-devstg-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_policy.default[0] will be imported
    resource "aws_s3_bucket_policy" "default" {
        bucket = "bb-apps-devstg-terraform-backend"
        id     = "bb-apps-devstg-terraform-backend"
        policy = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-apps-devstg-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.default will be imported
    resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-apps-devstg-terraform-backend"
        id                      = "bb-apps-devstg-terraform-backend"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_public_access_block.replication_bucket[0] will be imported
    resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-apps-devstg-terraform-backend-replica"
        id                      = "bb-apps-devstg-terraform-backend-replica"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = "bb-apps-devstg-terraform-backend"
      + id     = (known after apply)
      + role   = "arn:aws:iam::523857393444:role/bb-apps-devstg-terraform-backend-bucket-replication"

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = "arn:aws:s3:::bb-apps-devstg-terraform-backend-replica"
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.default will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
        bucket = "bb-apps-devstg-terraform-backend"
        id     = "bb-apps-devstg-terraform-backend"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
        bucket = "bb-apps-devstg-terraform-backend-replica"
        id     = "bb-apps-devstg-terraform-backend-replica"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.default will be imported
    resource "aws_s3_bucket_versioning" "default" {
        bucket = "bb-apps-devstg-terraform-backend"
        id     = "bb-apps-devstg-terraform-backend"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-devstg"].aws_s3_bucket_versioning.replication_bucket[0] will be imported
    resource "aws_s3_bucket_versioning" "replication_bucket" {
        bucket = "bb-apps-devstg-terraform-backend-replica"
        id     = "bb-apps-devstg-terraform-backend-replica"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-devstg"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

  # module.base_tf_backend["apps-prd"].aws_dynamodb_table.without_server_side_encryption[0] will be imported
    resource "aws_dynamodb_table" "without_server_side_encryption" {
        arn                         = "arn:aws:dynamodb:us-east-1:802787198489:table/bb-apps-prd-terraform-backend"
        billing_mode                = "PROVISIONED"
        deletion_protection_enabled = false
        hash_key                    = "LockID"
        id                          = "bb-apps-prd-terraform-backend"
        name                        = "bb-apps-prd-terraform-backend"
        read_capacity               = 5
        stream_enabled              = false
        table_class                 = "STANDARD"
        tags                        = {
            "Environment" = "apps-prd"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "apps-prd"
            "Terraform"   = "true"
        }
        write_capacity              = 5

        attribute {
            name = "LockID"
            type = "S"
        }

        point_in_time_recovery {
            enabled                 = false
            recovery_period_in_days = 0
        }

        ttl {
            enabled = false
        }
    }

  # module.base_tf_backend["apps-prd"].aws_iam_policy.bucket_replication[0] will be imported
    resource "aws_iam_policy" "bucket_replication" {
        arn              = "arn:aws:iam::802787198489:policy/bb-apps-prd-terraform-backend-bucket-replication"
        attachment_count = 1
        id               = "arn:aws:iam::802787198489:policy/bb-apps-prd-terraform-backend-bucket-replication"
        name             = "bb-apps-prd-terraform-backend-bucket-replication"
        path             = "/"
        policy           = jsonencode(
            {
                Statement = [
                    {
                        Action   = [
                            "s3:ListBucket",
                            "s3:GetReplicationConfiguration",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-apps-prd-terraform-backend"
                        Sid      = "1"
                    },
                    {
                        Action   = [
                            "s3:GetObjectVersionForReplication",
                            "s3:GetObjectVersionAcl",
                            "s3:GetObjectVersion",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-apps-prd-terraform-backend/*"
                        Sid      = "2"
                    },
                    {
                        Action   = [
                            "s3:ReplicateTags",
                            "s3:ReplicateObject",
                            "s3:ReplicateDelete",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-apps-prd-terraform-backend-replica/*"
                        Sid      = "6"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        policy_id        = "ANPA3V2OYQYM2QEVN3C5Q"
        tags             = {}
        tags_all         = {}
    }

  # module.base_tf_backend["apps-prd"].aws_iam_role.bucket_replication[0] will be imported
    resource "aws_iam_role" "bucket_replication" {
        arn                   = "arn:aws:iam::802787198489:role/bb-apps-prd-terraform-backend-bucket-replication"
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        create_date           = "2025-05-28T18:42:36Z"
        force_detach_policies = false
        id                    = "bb-apps-prd-terraform-backend-bucket-replication"
        managed_policy_arns   = [
            "arn:aws:iam::802787198489:policy/bb-apps-prd-terraform-backend-bucket-replication",
        ]
        max_session_duration  = 3600
        name                  = "bb-apps-prd-terraform-backend-bucket-replication"
        path                  = "/"
        tags                  = {}
        tags_all              = {}
        unique_id             = "AROA3V2OYQYMSN5LNDJW3"
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket.default will be imported
    resource "aws_s3_bucket" "default" {
        arn                         = "arn:aws:s3:::bb-apps-prd-terraform-backend"
        bucket                      = "bb-apps-prd-terraform-backend"
        bucket_domain_name          = "bb-apps-prd-terraform-backend.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-apps-prd-terraform-backend.s3.us-east-1.amazonaws.com"
        hosted_zone_id              = "Z3AQBSTGFYJSTF"
        id                          = "bb-apps-prd-terraform-backend"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-apps-prd-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-1"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "apps-prd"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "apps-prd"
            "Terraform"   = "true"
        }

        grant {
            id          = "7103b9199553c430c90df5b3be171ec9cf8692eab196a82d4b2750b312cf42ab"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        replication_configuration {
            role = "arn:aws:iam::802787198489:role/bb-apps-prd-terraform-backend-bucket-replication"

            rules {
                id       = "standard_bucket_replication"
                priority = 0
                status   = "Enabled"

                destination {
                    bucket        = "arn:aws:s3:::bb-apps-prd-terraform-backend-replica"
                    storage_class = "STANDARD"
                }
            }
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket.replication_bucket[0] will be imported
    resource "aws_s3_bucket" "replication_bucket" {
        arn                         = "arn:aws:s3:::bb-apps-prd-terraform-backend-replica"
        bucket                      = "bb-apps-prd-terraform-backend-replica"
        bucket_domain_name          = "bb-apps-prd-terraform-backend-replica.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-apps-prd-terraform-backend-replica.s3.us-east-2.amazonaws.com"
        hosted_zone_id              = "Z2O1EMRO9K5GLX"
        id                          = "bb-apps-prd-terraform-backend-replica"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-apps-prd-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-2"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "apps-prd"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "apps-prd"
            "Terraform"   = "true"
        }

        grant {
            id          = "7103b9199553c430c90df5b3be171ec9cf8692eab196a82d4b2750b312cf42ab"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.bucket_replication[0] will be imported
    resource "aws_s3_bucket_policy" "bucket_replication" {
        bucket = "bb-apps-prd-terraform-backend-replica"
        id     = "bb-apps-prd-terraform-backend-replica"
        policy = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-apps-prd-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_policy.default[0] will be imported
    resource "aws_s3_bucket_policy" "default" {
        bucket = "bb-apps-prd-terraform-backend"
        id     = "bb-apps-prd-terraform-backend"
        policy = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-apps-prd-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.default will be imported
    resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-apps-prd-terraform-backend"
        id                      = "bb-apps-prd-terraform-backend"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_public_access_block.replication_bucket[0] will be imported
    resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-apps-prd-terraform-backend-replica"
        id                      = "bb-apps-prd-terraform-backend-replica"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = "bb-apps-prd-terraform-backend"
      + id     = (known after apply)
      + role   = "arn:aws:iam::802787198489:role/bb-apps-prd-terraform-backend-bucket-replication"

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = "arn:aws:s3:::bb-apps-prd-terraform-backend-replica"
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.default will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
        bucket = "bb-apps-prd-terraform-backend"
        id     = "bb-apps-prd-terraform-backend"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
        bucket = "bb-apps-prd-terraform-backend-replica"
        id     = "bb-apps-prd-terraform-backend-replica"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.default will be imported
    resource "aws_s3_bucket_versioning" "default" {
        bucket = "bb-apps-prd-terraform-backend"
        id     = "bb-apps-prd-terraform-backend"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-prd"].aws_s3_bucket_versioning.replication_bucket[0] will be imported
    resource "aws_s3_bucket_versioning" "replication_bucket" {
        bucket = "bb-apps-prd-terraform-backend-replica"
        id     = "bb-apps-prd-terraform-backend-replica"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["apps-prd"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

  # module.base_tf_backend["data-science"].aws_dynamodb_table.without_server_side_encryption[0] will be imported
    resource "aws_dynamodb_table" "without_server_side_encryption" {
        arn                         = "arn:aws:dynamodb:us-east-1:905418344519:table/bb-data-science-terraform-backend"
        billing_mode                = "PROVISIONED"
        deletion_protection_enabled = false
        hash_key                    = "LockID"
        id                          = "bb-data-science-terraform-backend"
        name                        = "bb-data-science-terraform-backend"
        read_capacity               = 5
        stream_enabled              = false
        table_class                 = "STANDARD"
        tags                        = {
            "Environment" = "data-science"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "data-science"
            "Terraform"   = "true"
        }
        write_capacity              = 5

        attribute {
            name = "LockID"
            type = "S"
        }

        point_in_time_recovery {
            enabled                 = false
            recovery_period_in_days = 0
        }

        ttl {
            enabled = false
        }
    }

  # module.base_tf_backend["data-science"].aws_iam_policy.bucket_replication[0] will be imported
    resource "aws_iam_policy" "bucket_replication" {
        arn              = "arn:aws:iam::905418344519:policy/bb-data-science-terraform-backend-bucket-replication"
        attachment_count = 1
        id               = "arn:aws:iam::905418344519:policy/bb-data-science-terraform-backend-bucket-replication"
        name             = "bb-data-science-terraform-backend-bucket-replication"
        path             = "/"
        policy           = jsonencode(
            {
                Statement = [
                    {
                        Action   = [
                            "s3:ListBucket",
                            "s3:GetReplicationConfiguration",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-data-science-terraform-backend"
                        Sid      = "1"
                    },
                    {
                        Action   = [
                            "s3:GetObjectVersionForReplication",
                            "s3:GetObjectVersionAcl",
                            "s3:GetObjectVersion",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-data-science-terraform-backend/*"
                        Sid      = "2"
                    },
                    {
                        Action   = [
                            "s3:ReplicateTags",
                            "s3:ReplicateObject",
                            "s3:ReplicateDelete",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-data-science-terraform-backend-replica/*"
                        Sid      = "6"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        policy_id        = "ANPA5FTZDRBDXBFOWKUYQ"
        tags             = {}
        tags_all         = {}
    }

  # module.base_tf_backend["data-science"].aws_iam_role.bucket_replication[0] will be imported
    resource "aws_iam_role" "bucket_replication" {
        arn                   = "arn:aws:iam::905418344519:role/bb-data-science-terraform-backend-bucket-replication"
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        create_date           = "2024-04-29T20:29:22Z"
        force_detach_policies = false
        id                    = "bb-data-science-terraform-backend-bucket-replication"
        managed_policy_arns   = [
            "arn:aws:iam::905418344519:policy/bb-data-science-terraform-backend-bucket-replication",
        ]
        max_session_duration  = 3600
        name                  = "bb-data-science-terraform-backend-bucket-replication"
        path                  = "/"
        tags                  = {}
        tags_all              = {}
        unique_id             = "AROA5FTZDRBDRWGS32PIA"
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket.default will be imported
    resource "aws_s3_bucket" "default" {
        arn                         = "arn:aws:s3:::bb-data-science-terraform-backend"
        bucket                      = "bb-data-science-terraform-backend"
        bucket_domain_name          = "bb-data-science-terraform-backend.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-data-science-terraform-backend.s3.us-east-1.amazonaws.com"
        hosted_zone_id              = "Z3AQBSTGFYJSTF"
        id                          = "bb-data-science-terraform-backend"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-data-science-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-1"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "data-science"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "data-science"
            "Terraform"   = "true"
        }

        grant {
            id          = "f6ecfa7a9960b5b3290527d86afe6a38e66a7c92f1635b4bf7fc9f8b12d7a73b"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        replication_configuration {
            role = "arn:aws:iam::905418344519:role/bb-data-science-terraform-backend-bucket-replication"

            rules {
                id       = "standard_bucket_replication"
                priority = 0
                status   = "Enabled"

                destination {
                    bucket        = "arn:aws:s3:::bb-data-science-terraform-backend-replica"
                    storage_class = "STANDARD"
                }
            }
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket.replication_bucket[0] will be imported
    resource "aws_s3_bucket" "replication_bucket" {
        arn                         = "arn:aws:s3:::bb-data-science-terraform-backend-replica"
        bucket                      = "bb-data-science-terraform-backend-replica"
        bucket_domain_name          = "bb-data-science-terraform-backend-replica.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-data-science-terraform-backend-replica.s3.us-east-2.amazonaws.com"
        hosted_zone_id              = "Z2O1EMRO9K5GLX"
        id                          = "bb-data-science-terraform-backend-replica"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-data-science-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-2"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "data-science"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "data-science"
            "Terraform"   = "true"
        }

        grant {
            id          = "f6ecfa7a9960b5b3290527d86afe6a38e66a7c92f1635b4bf7fc9f8b12d7a73b"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_policy.bucket_replication[0] will be imported
    resource "aws_s3_bucket_policy" "bucket_replication" {
        bucket = "bb-data-science-terraform-backend-replica"
        id     = "bb-data-science-terraform-backend-replica"
        policy = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-data-science-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_policy.default[0] will be imported
    resource "aws_s3_bucket_policy" "default" {
        bucket = "bb-data-science-terraform-backend"
        id     = "bb-data-science-terraform-backend"
        policy = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-data-science-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.default will be imported
    resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-data-science-terraform-backend"
        id                      = "bb-data-science-terraform-backend"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_public_access_block.replication_bucket[0] will be imported
    resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-data-science-terraform-backend-replica"
        id                      = "bb-data-science-terraform-backend-replica"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = "bb-data-science-terraform-backend"
      + id     = (known after apply)
      + role   = "arn:aws:iam::905418344519:role/bb-data-science-terraform-backend-bucket-replication"

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = "arn:aws:s3:::bb-data-science-terraform-backend-replica"
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.default will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
        bucket = "bb-data-science-terraform-backend"
        id     = "bb-data-science-terraform-backend"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
        bucket = "bb-data-science-terraform-backend-replica"
        id     = "bb-data-science-terraform-backend-replica"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_versioning.default will be imported
    resource "aws_s3_bucket_versioning" "default" {
        bucket = "bb-data-science-terraform-backend"
        id     = "bb-data-science-terraform-backend"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["data-science"].aws_s3_bucket_versioning.replication_bucket[0] will be imported
    resource "aws_s3_bucket_versioning" "replication_bucket" {
        bucket = "bb-data-science-terraform-backend-replica"
        id     = "bb-data-science-terraform-backend-replica"

        versioning_configuration {
            status = "Enabled"
        }
    }

  # module.base_tf_backend["data-science"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

  # module.base_tf_backend["management"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["management"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["management"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["management"].aws_dynamodb_table.without_server_side_encryption[0] will be created
  + resource "aws_dynamodb_table" "without_server_side_encryption" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "LockID"
      + id               = (known after apply)
      + name             = "bb-management-terraform-backend"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + tags_all         = {
          + "Environment" = "management"
          + "Terraform"   = "true"
        }
      + write_capacity   = 5

      + attribute {
          + name = "LockID"
          + type = "S"
        }

      + point_in_time_recovery {
          + enabled                 = false
          + recovery_period_in_days = (known after apply)
        }

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # module.base_tf_backend["management"].aws_iam_policy.bucket_replication[0] must be replaced
  # (imported from "arn:aws:iam::754065527950:policy/bb-root-terraform-backend-bucket-replication")
  # Warning: this will destroy the imported resource
-/+ resource "aws_iam_policy" "bucket_replication" {
      ~ arn              = "arn:aws:iam::754065527950:policy/bb-root-terraform-backend-bucket-replication" -> (known after apply)
      ~ attachment_count = 1 -> (known after apply)
      ~ id               = "arn:aws:iam::754065527950:policy/bb-root-terraform-backend-bucket-replication" -> (known after apply)
      ~ name             = "bb-root-terraform-backend-bucket-replication" -> "bb-management-terraform-backend-bucket-replication" # forces replacement
      + name_prefix      = (known after apply)
        path             = "/"
      ~ policy           = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "s3:ListBucket",
                          - "s3:GetReplicationConfiguration",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:s3:::bb-root-terraform-backend"
                      - Sid      = "1"
                    },
                  - {
                      - Action   = [
                          - "s3:GetObjectVersionForReplication",
                          - "s3:GetObjectVersionAcl",
                          - "s3:GetObjectVersion",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:s3:::bb-root-terraform-backend/*"
                      - Sid      = "2"
                    },
                  - {
                      - Action   = [
                          - "s3:ReplicateTags",
                          - "s3:ReplicateObject",
                          - "s3:ReplicateDelete",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:s3:::bb-root-terraform-backend-replica/*"
                      - Sid      = "6"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ policy_id        = "ANPA27EOO2SHM7PIZIAOX" -> (known after apply)
      - tags             = {} -> null
      ~ tags_all         = {} -> (known after apply)
    }

  # module.base_tf_backend["management"].aws_iam_role.bucket_replication[0] must be replaced
  # (imported from "bb-root-terraform-backend-bucket-replication")
  # Warning: this will destroy the imported resource
-/+ resource "aws_iam_role" "bucket_replication" {
      ~ arn                   = "arn:aws:iam::754065527950:role/bb-root-terraform-backend-bucket-replication" -> (known after apply)
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
      ~ create_date           = "2025-06-25T23:39:00Z" -> (known after apply)
        force_detach_policies = false
      ~ id                    = "bb-root-terraform-backend-bucket-replication" -> (known after apply)
      ~ managed_policy_arns   = [
          - "arn:aws:iam::754065527950:policy/bb-root-terraform-backend-bucket-replication",
        ] -> (known after apply)
        max_session_duration  = 3600
      ~ name                  = "bb-root-terraform-backend-bucket-replication" -> "bb-management-terraform-backend-bucket-replication" # forces replacement
      + name_prefix           = (known after apply)
        path                  = "/"
      - tags                  = {} -> null
      ~ tags_all              = {} -> (known after apply)
      ~ unique_id             = "AROA27EOO2SHB2K3AP57X" -> (known after apply)

      ~ inline_policy {
          + arn                   = (known after apply)
          + assume_role_policy    = (known after apply)
          + create_date           = (known after apply)
          + description           = (known after apply)
          + force_detach_policies = (known after apply)
          + id                    = (known after apply)
          + managed_policy_arns   = (known after apply)
          + max_session_duration  = (known after apply)
          + name                  = (known after apply)
          + name_prefix           = (known after apply)
          + path                  = (known after apply)
          + permissions_boundary  = (known after apply)
          + tags                  = (known after apply)
          + tags_all              = (known after apply)
          + unique_id             = (known after apply)
        } -> (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket.default must be replaced
  # (imported from "bb-root-terraform-backend")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket" "default" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      ~ arn                         = "arn:aws:s3:::bb-root-terraform-backend" -> (known after apply)
      ~ bucket                      = "bb-root-terraform-backend" -> "bb-management-terraform-backend" # forces replacement
      ~ bucket_domain_name          = "bb-root-terraform-backend.s3.amazonaws.com" -> (known after apply)
      + bucket_prefix               = (known after apply)
      ~ bucket_regional_domain_name = "bb-root-terraform-backend.s3.us-east-1.amazonaws.com" -> (known after apply)
      + force_destroy               = false
      ~ hosted_zone_id              = "Z3AQBSTGFYJSTF" -> (known after apply)
      ~ id                          = "bb-root-terraform-backend" -> (known after apply)
      ~ object_lock_enabled         = false -> (known after apply)
      ~ policy                      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:*"
                      - Condition = {
                          - Bool = {
                              - "aws:SecureTransport" = "false"
                            }
                        }
                      - Effect    = "Deny"
                      - Principal = {
                          - AWS = "*"
                        }
                      - Resource  = "arn:aws:s3:::bb-root-terraform-backend/*"
                      - Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ region                      = "us-east-1" -> (known after apply)
      ~ request_payer               = "BucketOwner" -> (known after apply)
      ~ tags                        = {
          ~ "Environment" = "root" -> "management"
            "Terraform"   = "true"
        }
      ~ tags_all                    = {
          ~ "Environment" = "root" -> "management"
            "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      ~ cors_rule {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ grant {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ lifecycle_rule {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ logging {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ object_lock_configuration {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ replication_configuration {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ server_side_encryption_configuration {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ versioning {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ website {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket.replication_bucket[0] must be replaced
  # (imported from "bb-root-terraform-backend-replica")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket" "replication_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      ~ arn                         = "arn:aws:s3:::bb-root-terraform-backend-replica" -> (known after apply)
      ~ bucket                      = "bb-root-terraform-backend-replica" -> "bb-management-terraform-backend-replica" # forces replacement
      ~ bucket_domain_name          = "bb-root-terraform-backend-replica.s3.amazonaws.com" -> (known after apply)
      + bucket_prefix               = (known after apply)
      ~ bucket_regional_domain_name = "bb-root-terraform-backend-replica.s3.us-east-2.amazonaws.com" -> (known after apply)
      + force_destroy               = false
      ~ hosted_zone_id              = "Z2O1EMRO9K5GLX" -> (known after apply)
      ~ id                          = "bb-root-terraform-backend-replica" -> (known after apply)
      ~ object_lock_enabled         = false -> (known after apply)
      ~ policy                      = jsonencode(
            {
              - Id        = "TerraformStateBucketPolicies"
              - Statement = [
                  - {
                      - Action    = "s3:*"
                      - Condition = {
                          - Bool = {
                              - "aws:SecureTransport" = "false"
                            }
                        }
                      - Effect    = "Deny"
                      - Principal = "*"
                      - Resource  = "arn:aws:s3:::bb-root-terraform-backend-replica/*"
                      - Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ region                      = "us-east-2" -> (known after apply)
      ~ request_payer               = "BucketOwner" -> (known after apply)
      ~ tags                        = {
          ~ "Environment" = "root" -> "management"
            "Terraform"   = "true"
        }
      ~ tags_all                    = {
          ~ "Environment" = "root" -> "management"
            "Terraform"   = "true"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      ~ cors_rule {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ grant {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ lifecycle_rule {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ logging {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ object_lock_configuration {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ replication_configuration {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ server_side_encryption_configuration {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ versioning {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)

      ~ website {
          + acceleration_status         = (known after apply)
          + acl                         = (known after apply)
          + arn                         = (known after apply)
          + bucket                      = (known after apply)
          + bucket_domain_name          = (known after apply)
          + bucket_prefix               = (known after apply)
          + bucket_regional_domain_name = (known after apply)
          + force_destroy               = (known after apply)
          + hosted_zone_id              = (known after apply)
          + id                          = (known after apply)
          + object_lock_enabled         = (known after apply)
          + policy                      = (known after apply)
          + region                      = (known after apply)
          + request_payer               = (known after apply)
          + tags                        = (known after apply)
          + tags_all                    = (known after apply)
          + website_domain              = (known after apply)
          + website_endpoint            = (known after apply)
        } -> (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket_policy.bucket_replication[0] must be replaced
  # (imported from "bb-root-terraform-backend-replica")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_policy" "bucket_replication" {
      ~ bucket = "bb-root-terraform-backend-replica" # forces replacement -> (known after apply) # forces replacement
      ~ id     = "bb-root-terraform-backend-replica" -> (known after apply)
      ~ policy = jsonencode(
            {
              - Id        = "TerraformStateBucketPolicies"
              - Statement = [
                  - {
                      - Action    = "s3:*"
                      - Condition = {
                          - Bool = {
                              - "aws:SecureTransport" = "false"
                            }
                        }
                      - Effect    = "Deny"
                      - Principal = "*"
                      - Resource  = "arn:aws:s3:::bb-root-terraform-backend-replica/*"
                      - Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket_policy.default[0] must be replaced
  # (imported from "bb-root-terraform-backend")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_policy" "default" {
      ~ bucket = "bb-root-terraform-backend" # forces replacement -> (known after apply) # forces replacement
      ~ id     = "bb-root-terraform-backend" -> (known after apply)
      ~ policy = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:*"
                      - Condition = {
                          - Bool = {
                              - "aws:SecureTransport" = "false"
                            }
                        }
                      - Effect    = "Deny"
                      - Principal = {
                          - AWS = "*"
                        }
                      - Resource  = "arn:aws:s3:::bb-root-terraform-backend/*"
                      - Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
    }

  # module.base_tf_backend["management"].aws_s3_bucket_public_access_block.default must be replaced
  # (imported from "bb-root-terraform-backend")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
      ~ bucket                  = "bb-root-terraform-backend" # forces replacement -> (known after apply) # forces replacement
      ~ id                      = "bb-root-terraform-backend" -> (known after apply)
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["management"].aws_s3_bucket_public_access_block.replication_bucket[0] must be replaced
  # (imported from "bb-root-terraform-backend-replica")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
      ~ bucket                  = "bb-root-terraform-backend-replica" # forces replacement -> (known after apply) # forces replacement
      ~ id                      = "bb-root-terraform-backend-replica" -> (known after apply)
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["management"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = (known after apply)
      + id     = (known after apply)
      + role   = (known after apply)

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = (known after apply)
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.default must be replaced
  # (imported from "bb-root-terraform-backend")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
      ~ bucket = "bb-root-terraform-backend" -> "bb-management-terraform-backend" # forces replacement
      ~ id     = "bb-root-terraform-backend" -> (known after apply)

      - rule {
          - bucket_key_enabled = false -> null

          - apply_server_side_encryption_by_default {
              - sse_algorithm = "AES256" -> null
            }
        }
      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] must be replaced
  # (imported from "bb-root-terraform-backend-replica")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
      ~ bucket = "bb-root-terraform-backend-replica" # forces replacement -> (known after apply) # forces replacement
      ~ id     = "bb-root-terraform-backend-replica" -> (known after apply)

      - rule {
          - bucket_key_enabled = false -> null

          - apply_server_side_encryption_by_default {
              - sse_algorithm = "AES256" -> null
            }
        }
      + rule {
          + apply_server_side_encryption_by_default {
              + sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_versioning.default must be replaced
  # (imported from "bb-root-terraform-backend")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_versioning" "default" {
      ~ bucket = "bb-root-terraform-backend" # forces replacement -> (known after apply) # forces replacement
      ~ id     = "bb-root-terraform-backend" -> (known after apply)

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["management"].aws_s3_bucket_versioning.replication_bucket[0] must be replaced
  # (imported from "bb-root-terraform-backend-replica")
  # Warning: this will destroy the imported resource
-/+ resource "aws_s3_bucket_versioning" "replication_bucket" {
      ~ bucket = "bb-root-terraform-backend-replica" # forces replacement -> (known after apply) # forces replacement
      ~ id     = "bb-root-terraform-backend-replica" -> (known after apply)

      ~ versioning_configuration {
          ~ mfa_delete = "Disabled" -> (known after apply)
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["management"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

  # module.base_tf_backend["network"].aws_dynamodb_table.without_server_side_encryption[0] will be imported
    resource "aws_dynamodb_table" "without_server_side_encryption" {
        arn                         = "arn:aws:dynamodb:us-east-1:822280187662:table/bb-network-terraform-backend"
        billing_mode                = "PROVISIONED"
        deletion_protection_enabled = false
        hash_key                    = "LockID"
        id                          = "bb-network-terraform-backend"
        name                        = "bb-network-terraform-backend"
        read_capacity               = 5
        stream_enabled              = false
        table_class                 = "STANDARD"
        tags                        = {
            "Environment" = "network"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "network"
            "Terraform"   = "true"
        }
        write_capacity              = 5

        attribute {
            name = "LockID"
            type = "S"
        }

        point_in_time_recovery {
            enabled                 = false
            recovery_period_in_days = 0
        }

        ttl {
            enabled = false
        }
    }

  # module.base_tf_backend["network"].aws_iam_policy.bucket_replication[0] will be imported
    resource "aws_iam_policy" "bucket_replication" {
        arn              = "arn:aws:iam::822280187662:policy/bb-network-terraform-backend-bucket-replication"
        attachment_count = 1
        id               = "arn:aws:iam::822280187662:policy/bb-network-terraform-backend-bucket-replication"
        name             = "bb-network-terraform-backend-bucket-replication"
        path             = "/"
        policy           = jsonencode(
            {
                Statement = [
                    {
                        Action   = [
                            "s3:ListBucket",
                            "s3:GetReplicationConfiguration",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-network-terraform-backend"
                        Sid      = "1"
                    },
                    {
                        Action   = [
                            "s3:GetObjectVersionForReplication",
                            "s3:GetObjectVersionAcl",
                            "s3:GetObjectVersion",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-network-terraform-backend/*"
                        Sid      = "2"
                    },
                    {
                        Action   = [
                            "s3:ReplicateTags",
                            "s3:ReplicateObject",
                            "s3:ReplicateDelete",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-network-terraform-backend-replica/*"
                        Sid      = "6"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        policy_id        = "ANPA3645X54HKGJW2MB4W"
        tags             = {}
        tags_all         = {}
    }

  # module.base_tf_backend["network"].aws_iam_role.bucket_replication[0] will be imported
    resource "aws_iam_role" "bucket_replication" {
        arn                   = "arn:aws:iam::822280187662:role/bb-network-terraform-backend-bucket-replication"
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        create_date           = "2025-06-21T14:15:13Z"
        force_detach_policies = false
        id                    = "bb-network-terraform-backend-bucket-replication"
        managed_policy_arns   = [
            "arn:aws:iam::822280187662:policy/bb-network-terraform-backend-bucket-replication",
        ]
        max_session_duration  = 3600
        name                  = "bb-network-terraform-backend-bucket-replication"
        path                  = "/"
        tags                  = {}
        tags_all              = {}
        unique_id             = "AROA3645X54HOORYQDRCW"
    }

  # module.base_tf_backend["network"].aws_s3_bucket.default will be imported
    resource "aws_s3_bucket" "default" {
        arn                         = "arn:aws:s3:::bb-network-terraform-backend"
        bucket                      = "bb-network-terraform-backend"
        bucket_domain_name          = "bb-network-terraform-backend.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-network-terraform-backend.s3.us-east-1.amazonaws.com"
        hosted_zone_id              = "Z3AQBSTGFYJSTF"
        id                          = "bb-network-terraform-backend"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-network-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-1"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "network"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "network"
            "Terraform"   = "true"
        }

        grant {
            id          = "02b3a527febda61098dd997caa7d1c8c35f5e0b842cc1db4b681897d3c1248f8"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        replication_configuration {
            role = "arn:aws:iam::822280187662:role/bb-network-terraform-backend-bucket-replication"

            rules {
                id       = "standard_bucket_replication"
                priority = 0
                status   = "Enabled"

                destination {
                    bucket        = "arn:aws:s3:::bb-network-terraform-backend-replica"
                    storage_class = "STANDARD"
                }
            }
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket.replication_bucket[0] will be imported
    resource "aws_s3_bucket" "replication_bucket" {
        arn                         = "arn:aws:s3:::bb-network-terraform-backend-replica"
        bucket                      = "bb-network-terraform-backend-replica"
        bucket_domain_name          = "bb-network-terraform-backend-replica.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-network-terraform-backend-replica.s3.us-east-2.amazonaws.com"
        hosted_zone_id              = "Z2O1EMRO9K5GLX"
        id                          = "bb-network-terraform-backend-replica"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-network-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-2"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "network"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "network"
            "Terraform"   = "true"
        }

        grant {
            id          = "02b3a527febda61098dd997caa7d1c8c35f5e0b842cc1db4b681897d3c1248f8"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_policy.bucket_replication[0] will be imported
    resource "aws_s3_bucket_policy" "bucket_replication" {
        bucket = "bb-network-terraform-backend-replica"
        id     = "bb-network-terraform-backend-replica"
        policy = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-network-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["network"].aws_s3_bucket_policy.default[0] will be imported
    resource "aws_s3_bucket_policy" "default" {
        bucket = "bb-network-terraform-backend"
        id     = "bb-network-terraform-backend"
        policy = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-network-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["network"].aws_s3_bucket_public_access_block.default will be imported
    resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-network-terraform-backend"
        id                      = "bb-network-terraform-backend"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["network"].aws_s3_bucket_public_access_block.replication_bucket[0] will be imported
    resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-network-terraform-backend-replica"
        id                      = "bb-network-terraform-backend-replica"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["network"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = "bb-network-terraform-backend"
      + id     = (known after apply)
      + role   = "arn:aws:iam::822280187662:role/bb-network-terraform-backend-bucket-replication"

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = "arn:aws:s3:::bb-network-terraform-backend-replica"
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.default will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
        bucket = "bb-network-terraform-backend"
        id     = "bb-network-terraform-backend"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
        bucket = "bb-network-terraform-backend-replica"
        id     = "bb-network-terraform-backend-replica"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_versioning.default will be imported
    resource "aws_s3_bucket_versioning" "default" {
        bucket = "bb-network-terraform-backend"
        id     = "bb-network-terraform-backend"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["network"].aws_s3_bucket_versioning.replication_bucket[0] will be imported
    resource "aws_s3_bucket_versioning" "replication_bucket" {
        bucket = "bb-network-terraform-backend-replica"
        id     = "bb-network-terraform-backend-replica"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["network"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

  # module.base_tf_backend["security"].aws_dynamodb_table.without_server_side_encryption[0] will be imported
    resource "aws_dynamodb_table" "without_server_side_encryption" {
        arn                         = "arn:aws:dynamodb:us-east-1:900980591242:table/bb-security-terraform-backend"
        billing_mode                = "PROVISIONED"
        deletion_protection_enabled = false
        hash_key                    = "LockID"
        id                          = "bb-security-terraform-backend"
        name                        = "bb-security-terraform-backend"
        read_capacity               = 5
        stream_enabled              = false
        table_class                 = "STANDARD"
        tags                        = {
            "Environment" = "security"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "security"
            "Terraform"   = "true"
        }
        write_capacity              = 5

        attribute {
            name = "LockID"
            type = "S"
        }

        point_in_time_recovery {
            enabled                 = false
            recovery_period_in_days = 0
        }

        ttl {
            enabled = false
        }
    }

  # module.base_tf_backend["security"].aws_iam_policy.bucket_replication[0] will be imported
    resource "aws_iam_policy" "bucket_replication" {
        arn              = "arn:aws:iam::900980591242:policy/bb-security-terraform-backend-bucket-replication"
        attachment_count = 1
        id               = "arn:aws:iam::900980591242:policy/bb-security-terraform-backend-bucket-replication"
        name             = "bb-security-terraform-backend-bucket-replication"
        path             = "/"
        policy           = jsonencode(
            {
                Statement = [
                    {
                        Action   = [
                            "s3:ListBucket",
                            "s3:GetReplicationConfiguration",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-security-terraform-backend"
                        Sid      = "1"
                    },
                    {
                        Action   = [
                            "s3:GetObjectVersionForReplication",
                            "s3:GetObjectVersionAcl",
                            "s3:GetObjectVersion",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-security-terraform-backend/*"
                        Sid      = "2"
                    },
                    {
                        Action   = [
                            "s3:ReplicateTags",
                            "s3:ReplicateObject",
                            "s3:ReplicateDelete",
                        ]
                        Effect   = "Allow"
                        Resource = "arn:aws:s3:::bb-security-terraform-backend-replica/*"
                        Sid      = "6"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        policy_id        = "ANPA5DRVAZKFOQQ5EFZI4"
        tags             = {}
        tags_all         = {}
    }

  # module.base_tf_backend["security"].aws_iam_role.bucket_replication[0] will be imported
    resource "aws_iam_role" "bucket_replication" {
        arn                   = "arn:aws:iam::900980591242:role/bb-security-terraform-backend-bucket-replication"
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        create_date           = "2025-06-13T23:52:22Z"
        force_detach_policies = false
        id                    = "bb-security-terraform-backend-bucket-replication"
        managed_policy_arns   = [
            "arn:aws:iam::900980591242:policy/bb-security-terraform-backend-bucket-replication",
        ]
        max_session_duration  = 3600
        name                  = "bb-security-terraform-backend-bucket-replication"
        path                  = "/"
        tags                  = {}
        tags_all              = {}
        unique_id             = "AROA5DRVAZKFCFCLWBO4X"
    }

  # module.base_tf_backend["security"].aws_s3_bucket.default will be imported
    resource "aws_s3_bucket" "default" {
        arn                         = "arn:aws:s3:::bb-security-terraform-backend"
        bucket                      = "bb-security-terraform-backend"
        bucket_domain_name          = "bb-security-terraform-backend.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-security-terraform-backend.s3.us-east-1.amazonaws.com"
        hosted_zone_id              = "Z3AQBSTGFYJSTF"
        id                          = "bb-security-terraform-backend"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-security-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-1"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "security"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "security"
            "Terraform"   = "true"
        }

        grant {
            id          = "dec403a9fd9b9964897cc9b0b57c868533fcd0df80c5e8dc9d53db63842d9d36"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        replication_configuration {
            role = "arn:aws:iam::900980591242:role/bb-security-terraform-backend-bucket-replication"

            rules {
                id       = "standard_bucket_replication"
                priority = 0
                status   = "Enabled"

                destination {
                    bucket        = "arn:aws:s3:::bb-security-terraform-backend-replica"
                    storage_class = "STANDARD"
                }
            }
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket.replication_bucket[0] will be imported
    resource "aws_s3_bucket" "replication_bucket" {
        arn                         = "arn:aws:s3:::bb-security-terraform-backend-replica"
        bucket                      = "bb-security-terraform-backend-replica"
        bucket_domain_name          = "bb-security-terraform-backend-replica.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-security-terraform-backend-replica.s3.us-east-2.amazonaws.com"
        hosted_zone_id              = "Z2O1EMRO9K5GLX"
        id                          = "bb-security-terraform-backend-replica"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-security-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-2"
        request_payer               = "BucketOwner"
        tags                        = {
            "Environment" = "security"
            "Terraform"   = "true"
        }
        tags_all                    = {
            "Environment" = "security"
            "Terraform"   = "true"
        }

        grant {
            id          = "dec403a9fd9b9964897cc9b0b57c868533fcd0df80c5e8dc9d53db63842d9d36"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_policy.bucket_replication[0] will be imported
    resource "aws_s3_bucket_policy" "bucket_replication" {
        bucket = "bb-security-terraform-backend-replica"
        id     = "bb-security-terraform-backend-replica"
        policy = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-security-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["security"].aws_s3_bucket_policy.default[0] will be imported
    resource "aws_s3_bucket_policy" "default" {
        bucket = "bb-security-terraform-backend"
        id     = "bb-security-terraform-backend"
        policy = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-security-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["security"].aws_s3_bucket_public_access_block.default will be imported
    resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-security-terraform-backend"
        id                      = "bb-security-terraform-backend"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["security"].aws_s3_bucket_public_access_block.replication_bucket[0] will be imported
    resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-security-terraform-backend-replica"
        id                      = "bb-security-terraform-backend-replica"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["security"].aws_s3_bucket_replication_configuration.this[0] will be created
  + resource "aws_s3_bucket_replication_configuration" "this" {
      + bucket = "bb-security-terraform-backend"
      + id     = (known after apply)
      + role   = "arn:aws:iam::900980591242:role/bb-security-terraform-backend-bucket-replication"

      + rule {
          + id     = "standard_bucket_replication"
          + status = "Enabled"

          + destination {
              + bucket        = "arn:aws:s3:::bb-security-terraform-backend-replica"
              + storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.default will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
        bucket = "bb-security-terraform-backend"
        id     = "bb-security-terraform-backend"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
        bucket = "bb-security-terraform-backend-replica"
        id     = "bb-security-terraform-backend-replica"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_versioning.default will be imported
    resource "aws_s3_bucket_versioning" "default" {
        bucket = "bb-security-terraform-backend"
        id     = "bb-security-terraform-backend"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["security"].aws_s3_bucket_versioning.replication_bucket[0] will be imported
    resource "aws_s3_bucket_versioning" "replication_bucket" {
        bucket = "bb-security-terraform-backend-replica"
        id     = "bb-security-terraform-backend-replica"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["security"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

  # module.base_tf_backend["shared"].data.aws_iam_policy_document.bucket_replication[0] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_iam_policy_document" "bucket_replication" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetReplicationConfiguration",
              + "s3:ListBucket",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:s3:::bb-shared-terraform-backend",
            ]
          + sid       = "1"
        }
      + statement {
          + actions   = [
              + "s3:GetObjectVersion",
              + "s3:GetObjectVersionAcl",
              + "s3:GetObjectVersionForReplication",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:s3:::bb-shared-terraform-backend/*",
            ]
          + sid       = "2"
        }
      + statement {
          + actions   = [
              + "s3:ReplicateDelete",
              + "s3:ReplicateObject",
              + "s3:ReplicateTags",
            ]
          + effect    = "Allow"
          + resources = [
              + "arn:aws:s3:::bb-shared-terraform-backend-replica/*",
            ]
          + sid       = "6"
        }
    }

  # module.base_tf_backend["shared"].data.aws_iam_policy_document.default-ssl will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_iam_policy_document" "default-ssl" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + "arn:aws:s3:::bb-shared-terraform-backend/*",
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["shared"].data.aws_iam_policy_document.default-ssl-vpc will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_iam_policy_document" "default-ssl-vpc" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + "arn:aws:s3:::bb-shared-terraform-backend/*",
            ]
          + sid       = "EnforceSSlRequestsOnly"

          + condition {
              + test     = "Bool"
              + values   = [
                  + "false",
                ]
              + variable = "aws:SecureTransport"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
      + statement {
          + actions   = [
              + "s3:*",
            ]
          + effect    = "Deny"
          + resources = [
              + "arn:aws:s3:::bb-shared-terraform-backend",
              + "arn:aws:s3:::bb-shared-terraform-backend/*",
            ]
          + sid       = "EnforceVPCRequestsOnly"

          + condition {
              + test     = "StringNotEquals"
              + values   = []
              + variable = "aws:sourceVpc"
            }

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_dynamodb_table.without_server_side_encryption[0] will be updated in-place
  # (imported from "bb-shared-terraform-backend")
  ~ resource "aws_dynamodb_table" "without_server_side_encryption" {
        arn                         = "arn:aws:dynamodb:us-east-1:763606934258:table/bb-shared-terraform-backend"
        billing_mode                = "PROVISIONED"
        deletion_protection_enabled = false
        hash_key                    = "LockID"
        id                          = "bb-shared-terraform-backend"
        name                        = "bb-shared-terraform-backend"
        read_capacity               = 5
        stream_enabled              = false
        table_class                 = "STANDARD"
      ~ tags                        = {
            "Environment" = "shared"
          - "Layer"       = "base-tf-backend" -> null
            "Terraform"   = "true"
        }
      ~ tags_all                    = {
            "Environment" = "shared"
          - "Layer"       = "base-tf-backend" -> null
            "Terraform"   = "true"
        }
        write_capacity              = 5

        attribute {
            name = "LockID"
            type = "S"
        }

        point_in_time_recovery {
            enabled                 = false
            recovery_period_in_days = 0
        }

        ttl {
            enabled = false
        }
    }

  # module.base_tf_backend["shared"].aws_iam_role.bucket_replication[0] must be replaced
  # (imported from "bb-shared-terraform-backend-bucket-replication-module")
  # Warning: this will destroy the imported resource
-/+ resource "aws_iam_role" "bucket_replication" {
      ~ arn                   = "arn:aws:iam::763606934258:role/bb-shared-terraform-backend-bucket-replication-module" -> (known after apply)
        assume_role_policy    = jsonencode(
            {
                Statement = [
                    {
                        Action    = "sts:AssumeRole"
                        Effect    = "Allow"
                        Principal = {
                            Service = "s3.amazonaws.com"
                        }
                        Sid       = ""
                    },
                ]
                Version   = "2012-10-17"
            }
        )
      ~ create_date           = "2020-07-17T18:31:02Z" -> (known after apply)
        force_detach_policies = false
      ~ id                    = "bb-shared-terraform-backend-bucket-replication-module" -> (known after apply)
      ~ managed_policy_arns   = [
          - "arn:aws:iam::763606934258:policy/bb-shared-terraform-backend-bucket-replication-module",
        ] -> (known after apply)
        max_session_duration  = 3600
      ~ name                  = "bb-shared-terraform-backend-bucket-replication-module" -> "bb-shared-terraform-backend-bucket-replication" # forces replacement
      + name_prefix           = (known after apply)
        path                  = "/"
      - tags                  = {} -> null
      ~ tags_all              = {} -> (known after apply)
      ~ unique_id             = "AROA3DSUFELZMBMZLSMFR" -> (known after apply)

      ~ inline_policy {
          + arn                   = (known after apply)
          + assume_role_policy    = (known after apply)
          + create_date           = (known after apply)
          + description           = (known after apply)
          + force_detach_policies = (known after apply)
          + id                    = (known after apply)
          + managed_policy_arns   = (known after apply)
          + max_session_duration  = (known after apply)
          + name                  = (known after apply)
          + name_prefix           = (known after apply)
          + path                  = (known after apply)
          + permissions_boundary  = (known after apply)
          + tags                  = (known after apply)
          + tags_all              = (known after apply)
          + unique_id             = (known after apply)
        } -> (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket.default will be updated in-place
  # (imported from "bb-shared-terraform-backend")
  ~ resource "aws_s3_bucket" "default" {
        arn                         = "arn:aws:s3:::bb-shared-terraform-backend"
        bucket                      = "bb-shared-terraform-backend"
        bucket_domain_name          = "bb-shared-terraform-backend.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-shared-terraform-backend.s3.us-east-1.amazonaws.com"
      + force_destroy               = false
        hosted_zone_id              = "Z3AQBSTGFYJSTF"
        id                          = "bb-shared-terraform-backend"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = {
                            AWS = "*"
                        }
                        Resource  = "arn:aws:s3:::bb-shared-terraform-backend/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-1"
        request_payer               = "BucketOwner"
      ~ tags                        = {
            "Environment" = "shared"
          - "Layer"       = "base-tf-backend" -> null
            "Terraform"   = "true"
        }
      ~ tags_all                    = {
            "Environment" = "shared"
          - "Layer"       = "base-tf-backend" -> null
            "Terraform"   = "true"
        }

        grant {
            id          = "cbe5acb79da28f88a038a35aeb5abc79194b2cfee1ada0f9025eab91147c99fc"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        replication_configuration {
            role = "arn:aws:iam::763606934258:role/bb-shared-terraform-backend-bucket-replication-module"

            rules {
                id       = "standard_bucket_replication"
                priority = 0
                status   = "Enabled"

                destination {
                    bucket        = "arn:aws:s3:::bb-shared-terraform-backend-replica"
                    storage_class = "STANDARD"
                }
            }
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket.replication_bucket[0] will be updated in-place
  # (imported from "bb-shared-terraform-backend-replica")
  ~ resource "aws_s3_bucket" "replication_bucket" {
        arn                         = "arn:aws:s3:::bb-shared-terraform-backend-replica"
        bucket                      = "bb-shared-terraform-backend-replica"
        bucket_domain_name          = "bb-shared-terraform-backend-replica.s3.amazonaws.com"
        bucket_regional_domain_name = "bb-shared-terraform-backend-replica.s3.us-east-2.amazonaws.com"
      + force_destroy               = false
        hosted_zone_id              = "Z2O1EMRO9K5GLX"
        id                          = "bb-shared-terraform-backend-replica"
        object_lock_enabled         = false
        policy                      = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-shared-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
        region                      = "us-east-2"
        request_payer               = "BucketOwner"
      ~ tags                        = {
            "Environment" = "shared"
          - "Layer"       = "base-tf-backend" -> null
            "Terraform"   = "true"
        }
      ~ tags_all                    = {
            "Environment" = "shared"
          - "Layer"       = "base-tf-backend" -> null
            "Terraform"   = "true"
        }

        grant {
            id          = "cbe5acb79da28f88a038a35aeb5abc79194b2cfee1ada0f9025eab91147c99fc"
            permissions = [
                "FULL_CONTROL",
            ]
            type        = "CanonicalUser"
        }

        server_side_encryption_configuration {
            rule {
                bucket_key_enabled = false

                apply_server_side_encryption_by_default {
                    sse_algorithm = "AES256"
                }
            }
        }

        versioning {
            enabled    = true
            mfa_delete = false
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_policy.bucket_replication[0] will be imported
    resource "aws_s3_bucket_policy" "bucket_replication" {
        bucket = "bb-shared-terraform-backend-replica"
        id     = "bb-shared-terraform-backend-replica"
        policy = jsonencode(
            {
                Id        = "TerraformStateBucketPolicies"
                Statement = [
                    {
                        Action    = "s3:*"
                        Condition = {
                            Bool = {
                                "aws:SecureTransport" = "false"
                            }
                        }
                        Effect    = "Deny"
                        Principal = "*"
                        Resource  = "arn:aws:s3:::bb-shared-terraform-backend-replica/*"
                        Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
                Version   = "2012-10-17"
            }
        )
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_policy.default[0] will be updated in-place
  # (imported from "bb-shared-terraform-backend")
  ~ resource "aws_s3_bucket_policy" "default" {
        bucket = "bb-shared-terraform-backend"
        id     = "bb-shared-terraform-backend"
      ~ policy = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:*"
                      - Condition = {
                          - Bool = {
                              - "aws:SecureTransport" = "false"
                            }
                        }
                      - Effect    = "Deny"
                      - Principal = {
                          - AWS = "*"
                        }
                      - Resource  = "arn:aws:s3:::bb-shared-terraform-backend/*"
                      - Sid       = "EnforceSSlRequestsOnly"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.default will be imported
    resource "aws_s3_bucket_public_access_block" "default" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-shared-terraform-backend"
        id                      = "bb-shared-terraform-backend"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_public_access_block.replication_bucket[0] will be imported
    resource "aws_s3_bucket_public_access_block" "replication_bucket" {
        block_public_acls       = true
        block_public_policy     = true
        bucket                  = "bb-shared-terraform-backend-replica"
        id                      = "bb-shared-terraform-backend-replica"
        ignore_public_acls      = true
        restrict_public_buckets = true
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_replication_configuration.this[0] will be updated in-place
  # (imported from "bb-shared-terraform-backend")
  ~ resource "aws_s3_bucket_replication_configuration" "this" {
        bucket = "bb-shared-terraform-backend"
        id     = "bb-shared-terraform-backend"
      ~ role   = "arn:aws:iam::763606934258:role/bb-shared-terraform-backend-bucket-replication-module" -> (known after apply)

        rule {
            id       = "standard_bucket_replication"
            priority = 0
            status   = "Enabled"

            destination {
                bucket        = "arn:aws:s3:::bb-shared-terraform-backend-replica"
                storage_class = "STANDARD"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.default will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "default" {
        bucket = "bb-shared-terraform-backend"
        id     = "bb-shared-terraform-backend"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_server_side_encryption_configuration.replication_bucket[0] will be imported
    resource "aws_s3_bucket_server_side_encryption_configuration" "replication_bucket" {
        bucket = "bb-shared-terraform-backend-replica"
        id     = "bb-shared-terraform-backend-replica"

        rule {
            bucket_key_enabled = false

            apply_server_side_encryption_by_default {
                sse_algorithm = "AES256"
            }
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_versioning.default will be imported
    resource "aws_s3_bucket_versioning" "default" {
        bucket = "bb-shared-terraform-backend"
        id     = "bb-shared-terraform-backend"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["shared"].aws_s3_bucket_versioning.replication_bucket[0] will be imported
    resource "aws_s3_bucket_versioning" "replication_bucket" {
        bucket = "bb-shared-terraform-backend-replica"
        id     = "bb-shared-terraform-backend-replica"

        versioning_configuration {
            mfa_delete = "Disabled"
            status     = "Enabled"
        }
    }

  # module.base_tf_backend["shared"].time_sleep.wait_30_secs must be replaced
  # (imported from "30s,")
  # Warning: this will destroy the imported resource
-/+ resource "time_sleep" "wait_30_secs" {
        create_duration = "30s"
      ~ id              = "2025-10-01T16:42:57Z" -> (known after apply)
      - triggers        = {} -> null # forces replacement
    }

Plan: 97 to import, 27 to add, 5 to change, 20 to destroy.

Warning: Value for undeclared variable

The root module does not declare a variable named "profile" but a value was found in file "/binbash/baseline/config/backend.tfvars". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.

Warning: Value for undeclared variable

The root module does not declare a variable named "encrypt" but a value was found in file "/binbash/baseline/config/backend.tfvars". If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide certain "global" settings to all configurations in your organization. To reduce the verbosity of these warnings, use the -compact-warnings option.

Warning: Values for undeclared variables

In addition to the other similar warnings shown, 3 other variable(s) defined without being declared.

Warning: Argument is deprecated

  with module.base_tf_backend["apps-prd"].aws_s3_bucket_replication_configuration.this[0],
  on .terraform/modules/base_tf_backend/bucket_replication.tf line 39, in resource "aws_s3_bucket_replication_configuration" "this":
  39:     prefix = ""

prefix is deprecated. Use filter instead.

(and 5 more similar warnings elsewhere)

Warning: Invalid Attribute Combination

  with module.base_tf_backend.aws_s3_bucket_lifecycle_configuration.replication_bucket,
  on .terraform/modules/base_tf_backend/bucket_replication.tf line 89, in resource "aws_s3_bucket_lifecycle_configuration" "replication_bucket":
  89: resource "aws_s3_bucket_lifecycle_configuration" "replication_bucket" {

No attribute specified when one (and only one) of [rule[0].filter,rule[0].prefix] is required

This will be an error in a future version of the provider

(and 3 more similar warnings elsewhere)

Error: Cannot import non-existent remote object

While attempting to import an existing object to "module.base_tf_backend[\"shared\"].aws_iam_policy.bucket_replication[0]", the provider detected that no object exists with the given id. Only pre-existing objects can be imported; check that the id is correct and that it is associated with the provider's configured region or endpoint, or use "tofu apply" to create a new remote object for this resource.
