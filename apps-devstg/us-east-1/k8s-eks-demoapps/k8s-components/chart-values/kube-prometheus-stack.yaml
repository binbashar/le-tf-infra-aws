# -------------------------------------------------------------------------------------------
# AlertManager
# -------------------------------------------------------------------------------------------
alertmanager:
  enabled: true

  config:
    global:
      slack_api_url: ${alertmanagerSlackWebhook}
    route:
      group_by:
        - namespace
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 1h
      receiver: 'slack-notifications'
      routes:
      - receiver: 'slack-notifications'
        continue: true
    receivers:
    - name: 'slack-notifications'
      slack_configs:
      - channel: '#${alertmanagerSlackChannel}'
        send_resolved: true
        text: '{{ template "slack.alert.text" }}'

  templateFiles:
    alert.tmpl: |-
      {{ define "slack.alert.text" }}
      {{ range .Alerts }}
      *Alert:* {{ .Annotations.summary }} - `{{ .Labels.severity }}` \n
        *Environment:* {{ .Labels.cluster }} \n
        *Description:* {{ .Annotations.description }} \n
        *Graph:* <{{ .GeneratorURL }}|:chart_with_upwards_trend:> - *Runbook:* <{{ .Annotations.runbook }}|:documentation:> \n
        *Details:* \n {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}` \n
        {{ end }}
      {{ end }}
      {{ end }}

  ingress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: 'true'
      kubernetes.io/ingress.class: ${privateIngressClass}
      cert-manager.io/cluster-issuer: clusterissuer-arta-cert-manager-clusterissuer
    hosts:
      - alertmanager.${platform}.${privateBaseDomain}
    path: /
    tls:
      - secretName: alertmananager-tls
        hosts:
        - alertmanager.${platform}.${privateBaseDomain}

  alertmanagerSpec:
    nodeSelector: ${nodeSelector}
    tolerations: ${tolerations}

    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 2Gi

# -------------------------------------------------------------------------------------------
# Grafana
# -------------------------------------------------------------------------------------------
grafana:
  enabled: true

  adminUser: ${grafanaUser}
  adminPassword: ${grafanaPassword}

  serviceAccount:
    name: grafana
    annotations:
      eks.amazonaws.com/role-arn: ${grafanaRoleArn}

  ingress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: 'true'
      kubernetes.io/ingress.class: ${privateIngressClass}
      cert-manager.io/cluster-issuer: clusterissuer-binbash-cert-manager-clusterissuer
    hosts:
      - grafana.${platform}.${privateBaseDomain}
    path: /
    tls:
      - secretName: grafana-tls
        hosts:
          - grafana.${platform}.${privateBaseDomain}

  nodeSelector: ${nodeSelector}
  tolerations: ${tolerations}

  persistence:
    enabled: true
    size: 5Gi
    storageClassName: gp2

  # additionalDataSources:
  #   - name: CloudWatch
  #     type: cloudwatch
  #     jsonData:
  #       authType: default
  #       defaultRegion: us-east-1

# -------------------------------------------------------------------------------------------
# NodeExporter
# -------------------------------------------------------------------------------------------
nodeExporter:
  enabled: true

# -------------------------------------------------------------------------------------------
# KubeStateMetrics
# -------------------------------------------------------------------------------------------
kubeStateMetrics:
  enabled: true

kube-state-metrics:
  nodeSelector: ${nodeSelector}
  tolerations: ${tolerations}

# -------------------------------------------------------------------------------------------
# Prometheus
# -------------------------------------------------------------------------------------------
prometheus:
  enabled: true

  ingress:
    enabled: true
    annotations:
      kubernetes.io/tls-acme: 'true'
      kubernetes.io/ingress.class: ${privateIngressClass}
      cert-manager.io/cluster-issuer: clusterissuer-binbash-cert-manager-clusterissuer
    hosts:
      - prometheus.${platform}.${privateBaseDomain}
    path: /
    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.${platform}.${privateBaseDomain}

  prometheusSpec:
    nodeSelector: ${nodeSelector}
    tolerations: ${tolerations}

    retention: 30d

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: gp2
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 20Gi

  # additionalServiceMonitors:
  # - name: my-app
  #   selector:
  #     matchLabels:
  #       argocd.argoproj.io/instance: my-app
  #   namespaceSelector:
  #     matchNames:
  #     - my-app
  #   endpoints:
  #     - port: http
  #       path: /internal/metrics
  #       scheme: http
  #       interval: 30s

# -------------------------------------------------------------------------------------------
# Prometheus Operator
# -------------------------------------------------------------------------------------------
prometheusOperator:
  enabled: true
  admissionWebHooks:
    patch:
      nodeSelector: ${nodeSelector}
      tolerations: ${tolerations}
  nodeSelector: ${nodeSelector}
  tolerations: ${tolerations}


# -------------------------------------------------------------------------------------------
# Disable KubeControllerManagerDown and KubeSchedulerDown since they aren't necessary on EKS.
# Disable WatchDog until we can integrate it with PagerDuty or similar.
# -------------------------------------------------------------------------------------------
defaultRules:
  rules:
    kubeControllerManager: false
    kubeSchedulerAlerting: false

  disabled:
    Watchdog: true
    KubeControllerManagerDown: true
    KubeSchedulerDown: true
    KubeletTooManyPods: true
    InfoInhibitor: true

kubeControllerManager:
  enabled: false

kubeScheduler:
  enabled: false
