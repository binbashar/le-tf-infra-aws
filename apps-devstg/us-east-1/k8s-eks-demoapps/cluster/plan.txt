[19:32:49.562] INFO     Checking for local docker image, tag: 1.6.0-0.2.1-1000-1000...                                                                                                    
[19:32:49.571] INFO     âœ” OK                                                                                                                                                              
                                                                                                                                                                                          
[19:32:49.942] INFO     Attempting to get temporary credentials for apps-devstg account.                                                                                                  
[19:32:49.943] INFO     Using already configured temporary credentials.                                                                                                                   
[19:32:49.944] INFO     Attempting to get temporary credentials for shared account.                                                                                                       
               INFO     Using already configured temporary credentials.                                                                                                                   
Acquiring state lock. This may take a few moments...
[0m[1mdata.terraform_remote_state.keys: Reading...[0m[0m
[0m[1mdata.terraform_remote_state.shared-vpc: Reading...[0m[0m
[0m[1mdata.terraform_remote_state.cluster-vpc: Reading...[0m[0m
[0m[1mdata.terraform_remote_state.cluster-identities: Reading...[0m[0m
[0m[1mmodule.cluster.module.eks_managed_node_group["standard_spot"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.cluster.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.cluster.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.cluster.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.cluster.module.eks_managed_node_group["standard_spot"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.cluster.module.eks_managed_node_group["standard_spot"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.cluster.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.cluster.module.eks_managed_node_group["standard_spot"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.cluster.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2764486067][0m
[0m[1mmodule.cluster.module.eks_managed_node_group["standard_spot"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=2560088296][0m
[0m[1mmodule.cluster.data.aws_caller_identity.current: Read complete after 0s [id=523857393444][0m
[0m[1mmodule.cluster.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.cluster.module.eks_managed_node_group["standard_spot"].data.aws_caller_identity.current: Read complete after 1s [id=523857393444][0m
[0m[1mmodule.cluster.data.aws_iam_session_context.current: Read complete after 1s [id=arn:aws:sts::523857393444:assumed-role/AWSReservedSSO_DevOps_229828e5923d6952/agustin.rodriguez@binbash.com.ar][0m
[0m[1mdata.terraform_remote_state.keys: Read complete after 3s[0m
[0m[1mdata.terraform_remote_state.cluster-vpc: Read complete after 3s[0m
[0m[1mdata.terraform_remote_state.cluster-identities: Read complete after 3s[0m
[0m[1mdata.terraform_remote_state.shared-vpc: Read complete after 3s[0m

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_eks_cluster.cluster[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster" "cluster" {
      [32m+[0m[0m access_config             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = (known after apply)
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m kubernetes_network_config = (known after apply)
      [32m+[0m[0m name                      = "bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m outpost_config            = (known after apply)
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m upgrade_policy            = (known after apply)
      [32m+[0m[0m version                   = (known after apply)
      [32m+[0m[0m vpc_config                = (known after apply)
      [32m+[0m[0m zonal_shift_config        = (known after apply)
    }

[1m  # data.aws_eks_cluster_auth.cluster[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster_auth" "cluster" {
      [32m+[0m[0m id    = (known after apply)
      [32m+[0m[0m name  = "bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m token = (sensitive value)
    }

[1m  # local_file.metadata[0m will be created
[0m  [32m+[0m[0m resource "local_file" "metadata" {
      [32m+[0m[0m content              = <<-EOT
            type: k8s-eks-cluster
            data:
              region: us-east-1
              cluster_name: bb-apps-devstg-eks-demoapps
              profile: bb-apps-devstg-devops
        EOT
      [32m+[0m[0m content_base64sha256 = (known after apply)
      [32m+[0m[0m content_base64sha512 = (known after apply)
      [32m+[0m[0m content_md5          = (known after apply)
      [32m+[0m[0m content_sha1         = (known after apply)
      [32m+[0m[0m content_sha256       = (known after apply)
      [32m+[0m[0m content_sha512       = (known after apply)
      [32m+[0m[0m directory_permission = "0777"
      [32m+[0m[0m file_permission      = "0777"
      [32m+[0m[0m filename             = "./metadata.yaml"
      [32m+[0m[0m id                   = (known after apply)
    }

[1m  # module.cluster.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.cluster.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/bb-apps-devstg-eks-demoapps/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 7
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "/aws/eks/bb-apps-devstg-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "/aws/eks/bb-apps-devstg-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
    }

[1m  # module.cluster.aws_ec2_tag.cluster_primary_security_group["Environment"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Environment"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "apps-devstg"
    }

[1m  # module.cluster.aws_ec2_tag.cluster_primary_security_group["Layer"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Layer"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "k8s-eks-demoapps/cluster"
    }

[1m  # module.cluster.aws_ec2_tag.cluster_primary_security_group["Project"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Project"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "bb"
    }

[1m  # module.cluster.aws_ec2_tag.cluster_primary_security_group["Terraform"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Terraform"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "true"
    }

[1m  # module.cluster.aws_ec2_tag.cluster_primary_security_group["k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "owned"
    }

[1m  # module.cluster.aws_ec2_tag.cluster_primary_security_group["k8s.io/cluster-autoscaler/enabled"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "k8s.io/cluster-autoscaler/enabled"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "TRUE"
    }

[1m  # module.cluster.aws_eks_access_entry.this["cluster_creator"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_entry" "this" {
      [32m+[0m[0m access_entry_arn  = (known after apply)
      [32m+[0m[0m cluster_name      = "bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m created_at        = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m kubernetes_groups = (known after apply)
      [32m+[0m[0m modified_at       = (known after apply)
      [32m+[0m[0m principal_arn     = "arn:aws:iam::523857393444:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_DevOps_229828e5923d6952"
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m type              = "STANDARD"
      [32m+[0m[0m user_name         = (known after apply)
    }

[1m  # module.cluster.aws_eks_access_policy_association.this["cluster_creator_admin"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_access_policy_association" "this" {
      [32m+[0m[0m associated_at = (known after apply)
      [32m+[0m[0m cluster_name  = "bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m id            = (known after apply)
      [32m+[0m[0m modified_at   = (known after apply)
      [32m+[0m[0m policy_arn    = "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
      [32m+[0m[0m principal_arn = "arn:aws:iam::523857393444:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_DevOps_229828e5923d6952"

      [32m+[0m[0m access_scope {
          [32m+[0m[0m type = "cluster"
        }
    }

[1m  # module.cluster.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m bootstrap_self_managed_addons = true
      [32m+[0m[0m certificate_authority         = (known after apply)
      [32m+[0m[0m cluster_id                    = (known after apply)
      [32m+[0m[0m created_at                    = (known after apply)
      [32m+[0m[0m endpoint                      = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m identity                      = (known after apply)
      [32m+[0m[0m name                          = "bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m platform_version              = (known after apply)
      [32m+[0m[0m role_arn                      = (known after apply)
      [32m+[0m[0m status                        = (known after apply)
      [32m+[0m[0m tags                          = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
          [32m+[0m[0m "terraform-aws-modules"                                 = "eks"
        }
      [32m+[0m[0m tags_all                      = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
          [32m+[0m[0m "terraform-aws-modules"                                 = "eks"
        }
      [32m+[0m[0m version                       = "1.31"

      [32m+[0m[0m access_config {
          [32m+[0m[0m authentication_mode                         = "API_AND_CONFIG_MAP"
          [32m+[0m[0m bootstrap_cluster_creator_admin_permissions = false
        }

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = "arn:aws:kms:us-east-1:523857393444:key/63c14fe9-c3e7-4d3d-9856-ce372cf961b7"
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = "10.100.0.0/16"
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = false
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = [
              [32m+[0m[0m "subnet-0552376366a183a30",
              [32m+[0m[0m "subnet-07d10906f0e9e3f0c",
              [32m+[0m[0m "subnet-0c67de6fbc4e77587",
            ]
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.cluster.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "bb-apps-devstg-eks-demoapps-eks-irsa"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "bb-apps-devstg-eks-demoapps-eks-irsa"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.cluster.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = "bb-apps-devstg-eks-demoapps-cluster-ClusterEncryption"
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "kms:Encrypt",
                          [32m+[0m[0m "kms:Decrypt",
                          [32m+[0m[0m "kms:ListGrants",
                          [32m+[0m[0m "kms:DescribeKey",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:kms:us-east-1:523857393444:key/63c14fe9-c3e7-4d3d-9856-ce372cf961b7"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
    }

[1m  # module.cluster.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "bb-apps-devstg-eks-demoapps-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.cluster.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.cluster.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.cluster.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.cluster.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "bb-apps-devstg-eks-demoapps-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "bb-apps-devstg-eks-demoapps-cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "bb-apps-devstg-eks-demoapps-cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m vpc_id                 = "vpc-01d6b54ae12f823aa"
    }

[1m  # module.cluster.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "bb-apps-devstg-eks-demoapps-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "bb-apps-devstg-eks-demoapps-node"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
          [32m+[0m[0m "kubernetes.io/cluster/bb-apps-devstg-eks-demoapps"     = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "bb-apps-devstg-eks-demoapps-node"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
          [32m+[0m[0m "kubernetes.io/cluster/bb-apps-devstg-eks-demoapps"     = "owned"
        }
      [32m+[0m[0m vpc_id                 = "vpc-01d6b54ae12f823aa"
    }

[1m  # module.cluster.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.cluster["ingress_shared_vpc_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "172.18.0.0/20",
        ]
      [32m+[0m[0m description              = "Shared VPC to Cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.cluster.aws_security_group_rule.node["egress_self_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to Node all ports & protocols"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_self_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to Node all ports & protocols"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.cluster.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = "bb-apps-devstg-eks-demoapps"
          [32m+[0m[0m "cluster_service_cidr"               = (known after apply)
          [32m+[0m[0m "cluster_version"                    = "1.31"
        }
    }

[1m  # module.cluster-aws-auth.kubernetes_config_map_v1_data.aws_auth[0][0m will be created
[0m  [32m+[0m[0m resource "kubernetes_config_map_v1_data" "aws_auth" {
      [32m+[0m[0m data          = {
          [32m+[0m[0m "mapAccounts" = jsonencode([])
          [32m+[0m[0m "mapRoles"    = <<-EOT
                - "groups":
                  - "system:masters"
                  "rolearn": "arn:aws:iam::523857393444:role/DevOps"
                  "username": "DevOps"
                - "groups":
                  - "system:masters"
                  "rolearn": "arn:aws:iam::523857393444:role/AWSReservedSSO_DevOps_2b78d1d8a7818ab3"
                  "username": "DevOps"
            EOT
          [32m+[0m[0m "mapUsers"    = jsonencode([])
        }
      [32m+[0m[0m field_manager = "Terraform"
      [32m+[0m[0m force         = true
      [32m+[0m[0m id            = (known after apply)

      [32m+[0m[0m metadata {
          [32m+[0m[0m name      = "aws-auth"
          [32m+[0m[0m namespace = "kube-system"
        }
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "bb-apps-devstg-eks-demoapps"
      [32m+[0m[0m disk_size              = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
          [32m+[0m[0m "t3a.medium",
        ]
      [32m+[0m[0m labels                 = {
          [32m+[0m[0m "Environment" = "apps-devstg"
          [32m+[0m[0m "Layer"       = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"     = "bb"
          [32m+[0m[0m "Terraform"   = "true"
          [32m+[0m[0m "stack"       = "standard"
        }
      [32m+[0m[0m node_group_name        = (known after apply)
      [32m+[0m[0m node_group_name_prefix = "standard_spot-"
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = [
          [32m+[0m[0m "subnet-0552376366a183a30",
          [32m+[0m[0m "subnet-07d10906f0e9e3f0c",
          [32m+[0m[0m "subnet-0c67de6fbc4e77587",
        ]
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "standard_spot"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Name"                                                  = "standard_spot"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m version                = "1.31"

      [32m+[0m[0m launch_template {
          [32m+[0m[0m id      = (known after apply)
          [32m+[0m[0m name    = (known after apply)
          [32m+[0m[0m version = (known after apply)
        }

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 6
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "standard_spot-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].aws_iam_role_policy_attachment.this["AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].aws_iam_role_policy_attachment.this["AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].aws_iam_role_policy_attachment.this["AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].aws_launch_template.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_launch_template" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_version        = (known after apply)
      [32m+[0m[0m description            = "Custom launch template for standard_spot EKS managed node group"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m latest_version         = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "standard_spot-"
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                                           = "apps-devstg"
          [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
          [32m+[0m[0m "Project"                                               = "bb"
          [32m+[0m[0m "Terraform"                                             = "true"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
          [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
        }
      [32m+[0m[0m update_default_version = true
      [32m+[0m[0m vpc_security_group_ids = (known after apply)

      [32m+[0m[0m metadata_options {
          [32m+[0m[0m http_endpoint               = "enabled"
          [32m+[0m[0m http_protocol_ipv6          = (known after apply)
          [32m+[0m[0m http_put_response_hop_limit = 2
          [32m+[0m[0m http_tokens                 = "required"
          [32m+[0m[0m instance_metadata_tags      = (known after apply)
        }

      [32m+[0m[0m monitoring {
          [32m+[0m[0m enabled = true
        }

      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "instance"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment"                                           = "apps-devstg"
              [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
              [32m+[0m[0m "Name"                                                  = "standard_spot"
              [32m+[0m[0m "Project"                                               = "bb"
              [32m+[0m[0m "Terraform"                                             = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "network-interface"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment"                                           = "apps-devstg"
              [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
              [32m+[0m[0m "Name"                                                  = "standard_spot"
              [32m+[0m[0m "Project"                                               = "bb"
              [32m+[0m[0m "Terraform"                                             = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
            }
        }
      [32m+[0m[0m tag_specifications {
          [32m+[0m[0m resource_type = "volume"
          [32m+[0m[0m tags          = {
              [32m+[0m[0m "Environment"                                           = "apps-devstg"
              [32m+[0m[0m "Layer"                                                 = "k8s-eks-demoapps/cluster"
              [32m+[0m[0m "Name"                                                  = "standard_spot"
              [32m+[0m[0m "Project"                                               = "bb"
              [32m+[0m[0m "Terraform"                                             = "true"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/bb-apps-devstg-eks-demoapps" = "owned"
              [32m+[0m[0m "k8s.io/cluster-autoscaler/enabled"                     = "TRUE"
            }
        }
    }

[1m  # module.cluster.module.eks_managed_node_group["standard_spot"].module.user_data.null_resource.validate_cluster_service_cidr[0m will be created
[0m  [32m+[0m[0m resource "null_resource" "validate_cluster_service_cidr" {
      [32m+[0m[0m id = (known after apply)
    }

[1mPlan:[0m 42 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_endpoint                  = (known after apply)
  [32m+[0m[0m cluster_id                        = (known after apply)
  [32m+[0m[0m cluster_kubeconfig_instructions   = <<-EOT
        =========================================================================
        Run the following command to generate a kubeconfig file for this project:
        =========================================================================
        ```
        export AWS_CONFIG_FILE=~/.aws/bb/config
        export AWS_SHARED_CREDENTIALS_FILE=~/.aws/bb/credentials
        export KUBECONFIG=~/.kube/bb/apps-devstg
        aws eks update-kubeconfig --region us-east-1 --name bb-apps-devstg-eks-demoapps --profile bb-apps-devstg-devops
        ```
    EOT
  [32m+[0m[0m cluster_name                      = "bb-apps-devstg-eks-demoapps"
  [32m+[0m[0m cluster_oidc_issuer_url           = (known after apply)
  [32m+[0m[0m cluster_oidc_provider_arn         = (known after apply)
  [32m+[0m[0m cluster_primary_security_group_id = (known after apply)
  [32m+[0m[0m cluster_version                   = "1.31"



Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
Releasing state lock. This may take a few moments...
