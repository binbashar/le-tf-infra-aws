extraEnv:
  - name: AWS_REGION
    value: ${region}

data:
  applications_api: argocd
  # The address of Argo CD API endpoint - defaults to argocd-server.argocd
  argocd.server_addr: ${argoHost}
  # Whether to use GRPC-web protocol instead of GRPC over HTTP/2
  argocd.grpc_web: "true"
  # Whether to ignore invalid TLS cert from Argo CD API endpoint
  argocd.insecure: "false"
  # Whether to use plain text connection (http) instead of TLS (https)
  argocd.plaintext: "false"

config:
  gitCommitUser: ${gitCommitUser}
  gitCommitMail: ${gitCommitMail}
  gitCommitTemplate: |
    ${gitCommitMessageTemplate}
  registries:
  - name: ECR
    api_url: https://${repositoryApiUrl}
    prefix: ${repositoryApiUrl}
    ping: yes
    default: true
    insecure: no
    credentials: ext:/scripts/ecr-login.sh  #script name should match here and in authScripts
    credsexpire: 11h

authScripts:
  enabled: true
  scripts:
    ecr-login.sh: |   # notice script name matches above
      #!/bin/sh
      aws ecr --region $AWS_REGION get-authorization-token --output text --query 'authorizationData[].authorizationToken' | base64 -d

serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: ${roleArn}
  name: "argocd-image-updater"
