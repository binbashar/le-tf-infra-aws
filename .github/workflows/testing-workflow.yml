name: Test | Workflow IaC

on:
  workflow_call:
    inputs:
      localstack_version:
        description: 'Localstack version'
        required: true
        type: string
        default: '3.7.2'
      iac_platform:
        description: 'IaC platform name (terraform, tofu)'
        required: true
        type: string
        default: 'terraform'
      iac_version:
        description: 'IaC version'
        required: true
        type: string
        default: '1.6.0'
      aws_profile:
        description: 'AWS profile for localstack'
        required: true
        type: string
      aws_region:
        description: 'AWS region for localstack'
        required: false
        type: string
        default: 'us-east-1'
      required_state_file:
        description: 'If a terraform state file is required for testing'
        required: true
        type: boolean
        default: false
      state_file_test_path:
        description: 'Path to the terraform state file in the tests folder'
        required: false
        type: string
      bucket_name:
        description: 'Name of the S3 bucket to store the terraform state file'
        required: false
        type: string
      bucket_folder:
        description: 'Folder in the S3 bucket to store the terraform state file'
        required: false
        type: string
      aws_profile_required_state_file:
        description: 'AWS profile of data terraform state for getting value of another layer'
        required: false
        type: string
      working_directory:
        description: 'Working directory for the terraform code'
        required: true
        type: string
jobs:
  testing:
    runs-on: ubuntu-latest
    env:
      TF_CMD: ${{ inputs.iac_platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Check tests folder
        id: check-tests
        working-directory: ${{ inputs.working_directory }}
        run: |
          if [  -d tests ]; then
            echo "hasTests=true" >> $GITHUB_OUTPUT
          else
            echo "hasTests=false" >> $GITHUB_OUTPUT
          fi
      - if: ${{ steps.check-tests.outputs.hasTests == 'true' && inputs.iac_platform == 'terraform' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.iac_version }}
      - if: ${{ steps.check-tests.outputs.hasTests == 'true' && inputs.iac_platform == 'tofu' }}
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.iac_version }}
      - name: Set up Docker Buildx
        if: steps.check-tests.outputs.hasTests == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        if: steps.check-tests.outputs.hasTests == 'true'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-localstack-${{ inputs.localstack_version }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-localstack-${{ inputs.localstack_version }}-${{ runner.os }}-
            docker-localstack-${{ inputs.localstack_version }}-
      - uses: LocalStack/setup-localstack@v0.2.4
        if: steps.check-tests.outputs.hasTests == 'true'
        with:
          image-tag: ${{ inputs.localstack_version }}
          install-awslocal: true
      - name: Install LocalStack wrapper for platform
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          if [ "${{ inputs.iac_platform }}" = "tofu" ]; then
            echo "Installing opentofu-local for OpenTofu..."
            pip install opentofu-local
          else
            echo "Installing terraform-local for Terraform..."
            pip install terraform-local
          fi
      - name: Create S3 Backend Bucket for Testing
        if: ${{ inputs.required_state_file && steps.check-tests.outputs.hasTests == 'true' }}
        run: |
          # Create bucket for required state file testing
          BUCKET_NAME="${{ inputs.bucket_name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="localstack-terraform-backend-default"
          fi
          awslocal s3 mb s3://$BUCKET_NAME --region ${{ inputs.aws_region }}
          echo "BACKEND_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
      - name: Copy Required State File for Testing
        if: ${{ inputs.required_state_file && steps.check-tests.outputs.hasTests == 'true' }}
        run: |
          awslocal s3 cp ${{ inputs.working_directory }}/${{ inputs.state_file_test_path}} s3://$BACKEND_BUCKET_NAME/${{inputs.bucket_folder }}/terraform.tfstate
      - name: Create Cross-Account S3 Buckets for Dependencies
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          # Create all S3 buckets that complex layers expect for terraform_remote_state
          awslocal s3 mb s3://bb-security-terraform-backend --region ${{ inputs.aws_region }} || true
          awslocal s3 mb s3://bb-shared-terraform-backend --region ${{ inputs.aws_region }} || true
          awslocal s3 mb s3://bb-network-terraform-backend --region ${{ inputs.aws_region }} || true
          awslocal s3 mb s3://bb-apps-devstg-terraform-backend --region ${{ inputs.aws_region }} || true
          awslocal s3 mb s3://bb-apps-prd-terraform-backend --region ${{ inputs.aws_region }} || true
          awslocal s3 mb s3://bb-management-terraform-backend --region ${{ inputs.aws_region }} || true
          awslocal s3 mb s3://bb-data-science-terraform-backend --region ${{ inputs.aws_region }} || true
      - name: Fix Profile Dependencies in Terraform Files for LocalStack
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "=== Fixing Profile Dependencies for LocalStack Testing ==="
          
          # Create backup of original files
          find . -name "*.tf" -exec cp {} {}.backup \;
          
          # Remove profile references from provider blocks in all .tf files
          echo "Removing AWS profile references from provider blocks..."
          find . -name "*.tf" -exec sed -i 's/profile.*=.*/# profile removed for LocalStack testing/' {} \;
          
          # Fix terraform_remote_state data sources to use LocalStack
          echo "Fixing terraform_remote_state data sources..."
          
          # Simple approach: directly replace profile lines and add LocalStack config
          for tf_file in $(find . -name "*.tf"); do
            if grep -q "terraform_remote_state" "$tf_file"; then
              echo "Processing remote state in: $tf_file"
              
              # Remove profile lines from terraform_remote_state config blocks
              sed -i '/data "terraform_remote_state"/,/^[[:space:]]*}[[:space:]]*$/{/profile[[:space:]]*=/d}' "$tf_file"
              
              # Add LocalStack configuration after region line in config blocks
              sed -i '/data "terraform_remote_state"/,/^[[:space:]]*}[[:space:]]*$/{
                /region[[:space:]]*=.*/{
                  a\
    access_key                  = "test"\
    secret_key                  = "test"\
    skip_credentials_validation = true\
    skip_metadata_api_check     = true\
    skip_requesting_account_id  = true\
    force_path_style           = true\
    \
    endpoints = {\
      s3 = "http://localhost:4566"\
    }
                }
              }' "$tf_file"
            fi
          done
          
          # Create LocalStack provider override
          cat > localstack_provider.tf << 'EOF'
          # LocalStack Provider Configuration for Testing
          provider "aws" {
            region                      = var.region
            access_key                  = "test"
            secret_key                  = "test"
            skip_credentials_validation = true
            skip_metadata_api_check     = true
            skip_requesting_account_id  = true
            
            endpoints {
              s3       = "http://localhost:4566"
              iam      = "http://localhost:4566"
              kms      = "http://localhost:4566"
              sts      = "http://localhost:4566"
            }
          }
          EOF
          
          echo "✅ Fixed profile dependencies for LocalStack testing"
          echo "Modified files:"
          find . -name "*.tf" | head -5
          echo ""
          echo "Sample terraform_remote_state after modification:"
          grep -A 15 "terraform_remote_state" *.tf | head -20 || echo "No remote state found in current directory"
      - name: Generate Mock State Files for Cross-Account Dependencies
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          # Create realistic mock state file for security-identities (most common dependency)
          echo '{"version":4,"terraform_version":"1.6.0","serial":1,"lineage":"security-identities-mock","outputs":{"user_s3_demo_name":{"value":"mock-s3-demo-user","type":"string"},"cross_account_role_arn":{"value":"arn:aws:iam::000000000000:role/OrganizationAccountAccessRole","type":"string"}},"resources":[]}' > security_identities_state.json

          # Create mock state for shared-network (another common dependency)
          echo '{"version":4,"terraform_version":"1.6.0","serial":1,"lineage":"shared-network-mock","outputs":{"vpc_id":{"value":"vpc-mock123456","type":"string"},"vpc_cidr_block":{"value":"10.0.0.0/16","type":"string"}},"resources":[]}' > shared_network_state.json

          # Upload to exact locations expected by terraform_remote_state blocks
          awslocal s3 cp security_identities_state.json s3://bb-security-terraform-backend/security/identities/terraform.tfstate || true
          awslocal s3 cp shared_network_state.json s3://bb-shared-terraform-backend/shared/base-network/terraform.tfstate || true
      - name: LocalStack Service Health Check
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          echo "=== LocalStack Service Health Check ==="
          echo "Checking LocalStack readiness for services required by security-keys layer..."

          # Wait for LocalStack to be fully ready
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            echo "Health check attempt $((attempt + 1))/$max_attempts"

            # Test S3 service
            if awslocal s3 ls > /dev/null 2>&1; then
              echo "✅ S3 service is ready"
              s3_ready=true
            else
              echo "❌ S3 service not ready"
              s3_ready=false
            fi

            # Test KMS service
            if awslocal kms list-keys --region ${{ inputs.aws_region }} > /dev/null 2>&1; then
              echo "✅ KMS service is ready"
              kms_ready=true
            else
              echo "❌ KMS service not ready"
              kms_ready=false
            fi

            # Test IAM service
            if awslocal iam list-roles > /dev/null 2>&1; then
              echo "✅ IAM service is ready"
              iam_ready=true
            else
              echo "❌ IAM service not ready"
              iam_ready=false
            fi

            # Check if all services are ready
            if [ "$s3_ready" = true ] && [ "$kms_ready" = true ] && [ "$iam_ready" = true ]; then
              echo "🎉 All LocalStack services are ready!"
              break
            fi

            attempt=$((attempt + 1))
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting 10 seconds before next attempt..."
              sleep 10
            fi
          done

          # Final check - fail if services are not ready
          if [ $attempt -eq $max_attempts ]; then
            echo "💥 LocalStack services failed to become ready after $max_attempts attempts"
            echo "=== LocalStack Container Status ==="
            docker ps | grep localstack || echo "No LocalStack container found"
            echo "=== LocalStack Container Logs (last 50 lines) ==="
            docker logs $(docker ps -q --filter "ancestor=localstack/localstack:${{ inputs.localstack_version }}") --tail 50 || echo "Could not retrieve LocalStack logs"
            exit 1
          fi

          echo "=== LocalStack Health Check Complete ==="
      - name: Initialize with LocalStack wrapper
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_S3_FORCE_PATH_STYLE: true
          # Override AWS profile requirement for LocalStack testing
          # AWS_PROFILE unset to avoid profile configuration errors
        run: |
          if [ "${{ inputs.iac_platform }}" = "tofu" ]; then
            tflocal init -upgrade
          else
            tflocal init -upgrade
          fi
      - name: Run Test with LocalStack wrapper
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_S3_FORCE_PATH_STYLE: true
          # Override AWS profile requirement for LocalStack testing
          # AWS_PROFILE unset to avoid profile configuration errors
        run: |
          cp ../../../config/common.tfvars.example ../../../config/common.tfvars

          echo "=== Starting Test Execution ==="
          echo "Platform: ${{ inputs.iac_platform }}"
          echo "Working Directory: ${{ inputs.working_directory }}"
          echo "AWS Region: ${{ inputs.aws_region }}"

          # Pre-create all log files to ensure capture
          touch ./test-attempt-1.log
          touch ./test-attempt-1-stderr.log
          touch ./test-attempt-2.log
          touch ./test-attempt-2-stderr.log
          touch ./terraform-debug.log
          touch ./provider-trace.log

          # First attempt with comprehensive logging
          echo "=== Test Attempt 1 (Comprehensive Logging) ==="
          test_cmd=""
          if [ "${{ inputs.iac_platform }}" = "tofu" ]; then
            test_cmd="tflocal test -var-file=../../../config/common.tfvars -var-file=../../config/account.tfvars -var-file=../../config/backend.tfvars"
          else
            test_cmd="tflocal test -var-file=../../../config/common.tfvars -var-file=../../config/account.tfvars -var-file=../../config/backend.tfvars"
          fi

          echo "Executing: $test_cmd"
          echo "Capturing all output to: test-attempt-1.log and test-attempt-1-stderr.log"

          # Run test with comprehensive output capture
          set +e  # Don't exit on error
          $test_cmd >./test-attempt-1.log 2>./test-attempt-1-stderr.log
          test_exit_code=$?
          set -e  # Re-enable exit on error

          # Always show last part of logs for immediate feedback
          echo "=== Last 50 lines of stdout ==="
          tail -50 ./test-attempt-1.log || echo "No stdout captured"
          echo "=== Last 50 lines of stderr ==="
          tail -50 ./test-attempt-1-stderr.log || echo "No stderr captured"

          if [ $test_exit_code -eq 0 ]; then
            echo "✅ Test passed on first attempt!"
          else
            echo "❌ Test failed on first attempt (exit code: $test_exit_code)"
            echo ""
            echo "=== Test Attempt 2 (Maximum Diagnostics + Provider Tracing) ==="
            echo "Re-running with TRACE-level logging and provider RPC tracing..."

            # Set comprehensive logging environment variables
            export TF_LOG=TRACE
            export TF_LOG_PATH="./terraform-debug.log"
            export TF_LOG_PROVIDER=TRACE
            export TF_LOG_PROVIDER_PATH="./provider-trace.log"

            echo "Comprehensive logging enabled:"
            echo "  TF_LOG=$TF_LOG -> $TF_LOG_PATH"
            echo "  TF_LOG_PROVIDER=$TF_LOG_PROVIDER -> $TF_LOG_PROVIDER_PATH"
            echo "  Capturing to: test-attempt-2.log and test-attempt-2-stderr.log"

            # Second attempt with maximum diagnostics and output capture
            set +e  # Don't exit on error
            $test_cmd >./test-attempt-2.log 2>./test-attempt-2-stderr.log
            verbose_exit_code=$?
            set -e  # Re-enable exit on error

            # Show immediate feedback from attempt 2
            echo "=== Last 30 lines of attempt 2 stdout ==="
            tail -30 ./test-attempt-2.log || echo "No attempt 2 stdout captured"
            echo "=== Last 30 lines of attempt 2 stderr ==="
            tail -30 ./test-attempt-2-stderr.log || echo "No attempt 2 stderr captured"

            echo ""
            echo "=== Verbose Test Results ==="
            echo "Verbose test exit code: $verbose_exit_code"

            # Show last 100 lines of verbose log if it exists
            if [ -f "./terraform-debug.log" ]; then
              echo "=== Last 100 lines of Terraform Debug Log ==="
              tail -100 ./terraform-debug.log || echo "Could not read debug log"
            else
              echo "⚠️  No debug log file found at $TF_LOG_PATH"
            fi

            # Exit with original failure code
            echo "💥 Test failed after both attempts. Original exit code: $test_exit_code"
            exit $test_exit_code
          fi
      - name: LocalStack Diagnostic Log Collection
        if: failure() && steps.check-tests.outputs.hasTests == 'true'
        run: |
          echo "=== LocalStack Diagnostic Information ==="
          echo "Collecting LocalStack logs and container information for failure analysis..."

          # Get LocalStack container information
          echo "=== LocalStack Container Status ==="
          docker ps --filter "name=localstack" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "No LocalStack containers found by name"
          docker ps --filter "ancestor=localstack/localstack:${{ inputs.localstack_version }}" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "No LocalStack containers found by image"

          # Get container logs with error pattern matching
          echo ""
          echo "=== LocalStack Container Logs Analysis ==="
          container_id=$(docker ps -q --filter "ancestor=localstack/localstack:${{ inputs.localstack_version }}" | head -1)

          if [ -n "$container_id" ]; then
            echo "Found LocalStack container: $container_id"

            # Get full logs and save as artifact
            echo "Collecting full LocalStack logs..."
            docker logs "$container_id" > localstack-full.log 2>&1 || echo "Could not collect full logs"

            # Search for common error patterns
            echo ""
            echo "=== Error Pattern Analysis ==="

            echo "🔍 Searching for ValidationException errors:"
            docker logs "$container_id" 2>&1 | grep -i "ValidationException" | tail -10 || echo "No ValidationException errors found"

            echo ""
            echo "🔍 Searching for NotImplementedError:"
            docker logs "$container_id" 2>&1 | grep -i "NotImplementedError\|not implemented" | tail -10 || echo "No NotImplementedError found"

            echo ""
            echo "🔍 Searching for InternalFailure/ServerError:"
            docker logs "$container_id" 2>&1 | grep -i "InternalFailure\|InternalError\|ServerError" | tail -10 || echo "No internal server errors found"

            echo ""
            echo "🔍 Searching for KMS-specific errors:"
            docker logs "$container_id" 2>&1 | grep -i "kms\|CMK\|key.*not found" | tail -10 || echo "No KMS-specific errors found"

            echo ""
            echo "🔍 Searching for S3-specific errors:"
            docker logs "$container_id" 2>&1 | grep -i "s3.*error\|bucket.*not found\|NoSuchBucket" | tail -10 || echo "No S3-specific errors found"

            echo ""
            echo "🔍 Searching for IAM-specific errors:"
            docker logs "$container_id" 2>&1 | grep -i "iam.*error\|role.*not found\|AccessDenied" | tail -10 || echo "No IAM-specific errors found"

            # Show recent logs (last 200 lines)
            echo ""
            echo "=== Recent LocalStack Logs (Last 200 lines) ==="
            docker logs "$container_id" --tail 200 2>&1 || echo "Could not retrieve recent logs"

          else
            echo "⚠️  No LocalStack container found - this might be the root cause!"
            echo "Available containers:"
            docker ps -a
          fi

          # Check if log file was created and make it available as artifact
          if [ -f "localstack-full.log" ]; then
            echo ""
            echo "📁 Full LocalStack logs saved to localstack-full.log"
            ls -la localstack-full.log
          fi

          echo "=== LocalStack Diagnostic Collection Complete ==="
      - name: Upload Test Artifacts
        if: failure() && steps.check-tests.outputs.hasTests == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-logs-${{ inputs.iac_platform }}-${{ github.run_number }}
          path: |
            ${{ inputs.working_directory }}/test-attempt-1.log
            ${{ inputs.working_directory }}/test-attempt-1-stderr.log
            ${{ inputs.working_directory }}/test-attempt-2.log
            ${{ inputs.working_directory }}/test-attempt-2-stderr.log
            ${{ inputs.working_directory }}/terraform-debug.log
            ${{ inputs.working_directory }}/provider-trace.log
            ${{ inputs.working_directory }}/localstack-full.log
            ${{ inputs.working_directory }}/*.tfplan
          retention-days: 7
          if-no-files-found: ignore
      - name: Restore Original Terraform Files
        if: always() && steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "=== Restoring Original Terraform Files ==="
          # Restore original files from backups
          find . -name "*.tf.backup" -exec sh -c 'mv "$1" "${1%.backup}"' _ {} \;
          # Clean up LocalStack provider file
          rm -f localstack_provider.tf
          echo "✅ Original Terraform files restored"
