name: Test | Workflow IaC

on:
  workflow_call:
    inputs:
      localstack_version:
        description: 'Localstack version'
        required: true
        type: string
        default: '3.7.2'
      iac_platform:
        description: 'IaC platform name (terraform, tofu)'
        required: true
        type: string
        default: 'terraform'
      iac_version:
        description: 'IaC version'
        required: true
        type: string
        default: '1.6.0'
      aws_profile:
        description: 'AWS profile for localstack'
        required: true
        type: string
      aws_region:
        description: 'AWS region for localstack'
        required: false
        type: string
        default: 'us-east-1'
      required_state_file:
        description: 'If a terraform state file is required for testing'
        required: true
        type: boolean
        default: false
      state_file_test_path:
        description: 'Path to the terraform state file in the tests folder'
        required: false
        type: string
      bucket_name:
        description: 'Name of the S3 bucket to store the terraform state file'
        required: false
        type: string
      bucket_folder:
        description: 'Folder in the S3 bucket to store the terraform state file'
        required: false
        type: string
      aws_profile_required_state_file:
        description: 'AWS profile of data terraform state for getting value of another layer'
        required: false
        type: string
      working_directory:
        description: 'Working directory for the terraform code'
        required: true
        type: string
jobs:
  testing:
    runs-on: ubuntu-latest
    env:
      TF_CMD: ${{ inputs.iac_platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Check tests folder
        id: check-tests
        working-directory: ${{ inputs.working_directory }}
        run: |
          if [  -d tests ]; then
            echo "hasTests=true" >> $GITHUB_OUTPUT
          else
            echo "hasTests=false" >> $GITHUB_OUTPUT
          fi
      - if: ${{ steps.check-tests.outputs.hasTests == 'true' && inputs.iac_platform == 'terraform' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.iac_version }}
      - if: ${{ steps.check-tests.outputs.hasTests == 'true' && inputs.iac_platform == 'tofu' }}
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.iac_version }}
      - name: Set up Docker Buildx
        if: steps.check-tests.outputs.hasTests == 'true'
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        if: steps.check-tests.outputs.hasTests == 'true'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: docker-localstack-${{ inputs.localstack_version }}-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-localstack-${{ inputs.localstack_version }}-${{ runner.os }}-
            docker-localstack-${{ inputs.localstack_version }}-
      - uses: LocalStack/setup-localstack@v0.2.4
        if: steps.check-tests.outputs.hasTests == 'true'
        with:
          image-tag: ${{ inputs.localstack_version }}
          install-awslocal: true
      - name: Install LocalStack wrapper for platform
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          if [ "${{ inputs.iac_platform }}" = "tofu" ]; then
            echo "Installing opentofu-local for OpenTofu..."
            pip install opentofu-local
          else
            echo "Installing terraform-local for Terraform..."
            pip install terraform-local
          fi
      - name: Create S3 Backend Bucket for Testing
        if: ${{ inputs.required_state_file && steps.check-tests.outputs.hasTests == 'true' }}
        run: |
          # Create bucket for required state file testing
          BUCKET_NAME="${{ inputs.bucket_name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="localstack-terraform-backend-default"
          fi
          awslocal s3 mb s3://$BUCKET_NAME --region ${{ inputs.aws_region }}
          echo "BACKEND_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
      - name: Copy Required State File for Testing
        if: ${{ inputs.required_state_file && steps.check-tests.outputs.hasTests == 'true' }}
        run: |
          awslocal s3 cp ${{ inputs.working_directory }}/${{ inputs.state_file_test_path}} s3://$BACKEND_BUCKET_NAME/${{inputs.bucket_folder }}/terraform.tfstate
      - name: Initialize with LocalStack wrapper
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_S3_FORCE_PATH_STYLE: true
          # Override AWS profile requirement for LocalStack testing
          AWS_PROFILE: ""
        run: |
          if [ "${{ inputs.iac_platform }}" = "tofu" ]; then
            tflocal init -upgrade
          else
            tflocal init -upgrade
          fi
      - name: Run Test with LocalStack wrapper
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
          AWS_ENDPOINT_URL: http://localhost:4566
          AWS_S3_FORCE_PATH_STYLE: true
          # Override AWS profile requirement for LocalStack testing
          AWS_PROFILE: ""
        run: |
          cp ../../../config/common.tfvars.example ../../../config/common.tfvars
          if [ "${{ inputs.iac_platform }}" = "tofu" ]; then
            tflocal test -var-file=../../../config/common.tfvars -var-file=../../config/account.tfvars -var-file=../../config/backend.tfvars
          else
            tflocal test -var-file=../../../config/common.tfvars -var-file=../../config/account.tfvars -var-file=../../config/backend.tfvars
          fi
      - name: Cleanup LocalStack Provider Override
        if: always() && steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        run: rm -f localstack_providers_override.tf
