name: Test | Workflow IaC

on:
  workflow_call:
    inputs:
      localstack_version:
        description: 'Localstack version'
        required: true
        type: string
        default: '3.7.2'
      iac_platform:
        description: 'IaC platform name (terraform, tofu)'
        required: true
        type: string
        default: 'terraform'
      iac_version:
        description: 'IaC version'
        required: true
        type: string
        default: '1.6.0'
      aws_profile:
        description: 'AWS profile for localstack'
        required: true
        type: string
      aws_region:
        description: 'AWS region for localstack'
        required: false
        type: string
        default: 'us-east-1'
      required_state_file:
        description: 'If a terraform state file is required for testing'
        required: true
        type: boolean
        default: false
      state_file_test_path:
        description: 'Path to the terraform state file in the tests folder'
        required: false
        type: string
      bucket_name:
        description: 'Name of the S3 bucket to store the terraform state file'
        required: false
        type: string
      bucket_folder:
        description: 'Folder in the S3 bucket to store the terraform state file'
        required: false
        type: string
      aws_profile_required_state_file:
        description: 'AWS profile of data terraform state for getting value of another layer'
        required: false
        type: string
      working_directory:
        description: 'Working directory for the terraform code'
        required: true
        type: string
jobs:
  testing:
    runs-on: ubuntu-latest
    env:
      TF_CMD: ${{ inputs.iac_platform }}
    steps:
      - uses: actions/checkout@v4
      - name: Check tests folder
        id: check-tests
        working-directory: ${{ inputs.working_directory }}
        run: |
          if [  -d tests ]; then
            echo "hasTests=true" >> $GITHUB_OUTPUT
          else
            echo "hasTests=false" >> $GITHUB_OUTPUT
          fi
      - if: ${{ steps.check-tests.outputs.hasTests == 'true' && inputs.iac_platform == 'terraform' }}
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.iac_version }}
      - if: ${{ steps.check-tests.outputs.hasTests == 'true' && inputs.iac_platform == 'tofu' }}
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ inputs.iac_version }}
      - uses: LocalStack/setup-localstack@v0.2.4
        if: steps.check-tests.outputs.hasTests == 'true'
        with:
          image-tag: ${{ inputs.localstack_version }}
          install-awslocal: true
      - name: Configure AWS Credentials for Localstack
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          awslocal configure set aws_access_key_id fake --profile ${{ inputs.aws_profile }}
          awslocal configure set aws_secret_access_key fake --profile ${{ inputs.aws_profile }}
          awslocal configure set region ${{ inputs.aws_region }} --profile ${{ inputs.aws_profile }}
          awslocal configure set endpoint_url http://localhost:4566 --profile ${{ inputs.aws_profile }}
      - name: Configure AWS Credentials for Required State File
        if: ${{ inputs.required_state_file && steps.check-tests.outputs.hasTests == 'true' }}
        run: |
          awslocal configure set aws_access_key_id fake --profile ${{ inputs.aws_profile_required_state_file }}
          awslocal configure set aws_secret_access_key fake --profile ${{ inputs.aws_profile_required_state_file }}
          awslocal configure set region ${{ inputs.aws_region }} --profile ${{ inputs.aws_profile_required_state_file }}
          awslocal configure set endpoint_url http://localhost:4566 --profile ${{ inputs.aws_profile_required_state_file }}
      - name: Create LocalStack S3 Buckets (State Mockingbird Solution)
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          # Create all cross-account S3 buckets that layers reference in terraform_remote_state
          echo "Creating all cross-account S3 buckets for remote state dependencies..."
          
          # Main backend buckets for each account
          awslocal s3 mb s3://bb-security-terraform-backend --region ${{ inputs.aws_region }}
          awslocal s3 mb s3://bb-shared-terraform-backend --region ${{ inputs.aws_region }}
          awslocal s3 mb s3://bb-apps-devstg-terraform-backend --region ${{ inputs.aws_region }}
          awslocal s3 mb s3://bb-network-terraform-backend --region ${{ inputs.aws_region }}
          awslocal s3 mb s3://bb-data-science-terraform-backend --region ${{ inputs.aws_region }}
          
          # Default fallback bucket for layers without specific bucket_name
          BUCKET_NAME="${{ inputs.bucket_name }}"
          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="localstack-terraform-backend-default"
          fi
          awslocal s3 mb s3://$BUCKET_NAME --region ${{ inputs.aws_region }}
          echo "BACKEND_BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          
          echo "All S3 buckets created successfully"
      - name: Copy Terraform State File for testing to S3 Bucket
        if: ${{ inputs.required_state_file && steps.check-tests.outputs.hasTests == 'true' }}
        run: |
          awslocal s3 cp ${{ inputs.working_directory }}/${{ inputs.state_file_test_path}} s3://$BACKEND_BUCKET_NAME/${{inputs.bucket_folder }}/terraform.tfstate
      - name: Create Mock State Files for Remote Dependencies (State Mockingbird)
        if: steps.check-tests.outputs.hasTests == 'true'
        run: |
          # Create comprehensive mock state files for all terraform_remote_state dependencies
          echo "Generating mock state files for all cross-account dependencies..."
          
          # Security account state files
          cat > security_identities_state.json << 'EOF'
          {
            "version": 4,
            "terraform_version": "1.6.0",
            "serial": 1,
            "lineage": "security-identities-mock",
            "outputs": {
              "cross_account_role_arn": {
                "value": "arn:aws:iam::000000000000:role/OrganizationAccountAccessRole",
                "type": "string"
              },
              "admin_role_arn": {
                "value": "arn:aws:iam::000000000000:role/AdminRole",
                "type": "string"
              },
              "devops_role_arn": {
                "value": "arn:aws:iam::000000000000:role/DevOpsRole",
                "type": "string"
              }
            },
            "resources": []
          }
          EOF
          
          # Network account state files
          cat > network_base_state.json << 'EOF'
          {
            "version": 4,
            "terraform_version": "1.6.0",
            "serial": 1,
            "lineage": "network-base-mock",
            "outputs": {
              "vpc_id": {
                "value": "vpc-mock123456",
                "type": "string"
              },
              "private_subnets": {
                "value": ["subnet-mock123", "subnet-mock456"],
                "type": ["list", "string"]
              },
              "public_subnets": {
                "value": ["subnet-mock789", "subnet-mock012"],
                "type": ["list", "string"]
              }
            },
            "resources": []
          }
          EOF
          
          # Shared account state files
          cat > shared_base_state.json << 'EOF'
          {
            "version": 4,
            "terraform_version": "1.6.0",
            "serial": 1,
            "lineage": "shared-base-mock",
            "outputs": {
              "ecr_registry": {
                "value": "000000000000.dkr.ecr.us-east-1.amazonaws.com",
                "type": "string"
              },
              "route53_zone_id": {
                "value": "Z123456789ABCDEFGH",
                "type": "string"
              }
            },
            "resources": []
          }
          EOF
          
          # Upload all state files to their respective S3 locations
          awslocal s3 cp security_identities_state.json s3://bb-security-terraform-backend/security/identities/terraform.tfstate
          awslocal s3 cp network_base_state.json s3://bb-network-terraform-backend/network/base-network/terraform.tfstate
          awslocal s3 cp shared_base_state.json s3://bb-shared-terraform-backend/shared/base-network/terraform.tfstate
          
          # Create default state file for the working layer's own backend
          awslocal s3 cp security_identities_state.json s3://$BACKEND_BUCKET_NAME/shared-dependencies/terraform.tfstate
          
          echo "All mock state files created and uploaded successfully"
      - name: Create LocalStack Provider Override
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        run: |
          cat > localstack_providers_override.tf << 'EOF'
          provider "aws" {
            region                      = "${{ inputs.aws_region }}"
            access_key                  = "fake"
            secret_key                  = "fake"
            skip_credentials_validation = true
            skip_metadata_api_check     = true
            skip_requesting_account_id  = true

            endpoints {
              acm             = "http://localhost:4566"
              apigateway      = "http://localhost:4566"
              apigatewayv2    = "http://localhost:4566"
              cloudformation  = "http://localhost:4566"
              cloudfront      = "http://localhost:4566"
              cloudwatch      = "http://localhost:4566"
              dynamodb        = "http://localhost:4566"
              ec2             = "http://localhost:4566"
              ecs             = "http://localhost:4566"
              iam             = "http://localhost:4566"
              kms             = "http://localhost:4566"
              lambda          = "http://localhost:4566"
              rds             = "http://localhost:4566"
              route53         = "http://localhost:4566"
              s3              = "http://localhost:4566"
              secretsmanager  = "http://localhost:4566"
              ses             = "http://localhost:4566"
              sns             = "http://localhost:4566"
              sqs             = "http://localhost:4566"
              ssm             = "http://localhost:4566"
              sts             = "http://localhost:4566"
            }
          }
          EOF
      - name: Terraform Init
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
          AWS_S3_FORCE_PATH_STYLE: true
        run: $TF_CMD init -upgrade
      - name: Run Test
        if: steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        env:
          AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
          AWS_S3_FORCE_PATH_STYLE: true
        run: |
          cp ../../../config/common.tfvars.example ../../../config/common.tfvars
          $TF_CMD test -var-file=../../../config/common.tfvars -var-file=../../config/account.tfvars -var-file=../../config/backend.tfvars
      - name: Cleanup LocalStack Provider Override
        if: always() && steps.check-tests.outputs.hasTests == 'true'
        working-directory: ${{ inputs.working_directory }}
        run: rm -f localstack_providers_override.tf
