name: Claude Code Interactive Assistant

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  claude-interactive:
    # Only run on @claude mentions in PR or issue comments
    if: |
      github.event_name == 'issue_comment' &&
      contains(github.event.comment.body, '@claude')
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Leverage CLI
        run: |
          python3 -m venv ~/.leverage-venv
          source ~/.leverage-venv/bin/activate
          pip install --upgrade pip
          pip install leverage
          echo "$HOME/.leverage-venv/bin" >> $GITHUB_PATH
          leverage --version

      - name: Configure AWS Credentials
        if: |
          contains(github.event.comment.body, '@claude apply') ||
          contains(github.event.comment.body, '@claude plan') ||
          contains(github.event.comment.body, '@claude validate')
        run: |
          mkdir -p ~/.aws/bb

          # Configure AWS profile
          aws configure set region us-east-1 --profile bb-apps-devstg-devops
          aws configure set output json --profile bb-apps-devstg-devops
          aws configure set role_arn arn:aws:iam::${{ secrets.AWS_DEVSTG_ACCOUNT_ID }}:role/DeployMaster --profile bb-apps-devstg-devops
          aws configure set source_profile bb-deploymaster --profile bb-apps-devstg-devops

          # Create credentials
          cat << EOF > ~/.aws/credentials
          [bb-deploymaster]
          aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EOF

          cp ~/.aws/credentials ~/.aws/bb/
          cp ~/.aws/config ~/.aws/bb/

          echo "AWS_CONFIG_FILE=$HOME/.aws/bb/config" >> $GITHUB_ENV
          echo "AWS_SHARED_CREDENTIALS_FILE=$HOME/.aws/bb/credentials" >> $GITHUB_ENV
          echo "AWS_PROFILE=bb-apps-devstg-devops" >> $GITHUB_ENV

      - name: Configure Build Environment
        if: |
          contains(github.event.comment.body, '@claude apply') ||
          contains(github.event.comment.body, '@claude plan') ||
          contains(github.event.comment.body, '@claude validate')
        run: |
          # Disable MFA for CI/CD
          sed -i "s/^\(MFA_ENABLED=\)true/\1false/" build.env || echo "MFA_ENABLED=false" >> build.env

          # Ensure Leverage Toolbox version is set
          if ! grep -q "^TERRAFORM_IMAGE_TAG=" build.env 2>/dev/null; then
            echo "TERRAFORM_IMAGE_TAG=1.9.1-tofu-0.3.0" >> build.env
          fi

      - name: Claude Code Interactive Operations
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: |
            ## INTERACTIVE CLAUDE ASSISTANT WITH LEVERAGE CLI SUPPORT

            You are Claude Code with access to specialized agents and Leverage CLI for infrastructure operations.

            ### CONTEXT:
            - **Event**: Comment on ${{ github.event.issue.pull_request && 'PR' || 'Issue' }} #${{ github.event.issue.number }}
            - **Comment**: "${{ github.event.comment.body }}"
            - **Author**: ${{ github.event.comment.user.login }}
            - **Repository**: ${{ github.repository }}

            ### AVAILABLE OPERATIONS:

            #### 1. INFRASTRUCTURE OPERATIONS (with Leverage CLI)

            **@claude plan [layer-path]**
            ```bash
            cd [layer-path]
            source ~/.leverage-venv/bin/activate
            leverage tofu init -no-color
            leverage tofu plan -no-color > plan.txt
            # Analyze plan output and post results
            ```

            **@claude apply [layer-path]**
            ```bash
            cd [layer-path]
            source ~/.leverage-venv/bin/activate
            leverage tofu init -no-color
            leverage tofu plan -no-color -out=tfplan
            leverage tofu apply -auto-approve -no-color tfplan
            leverage tofu plan -destroy -no-color -out=rollback.tfplan
            # Upload rollback plan as artifact
            # Post results with rollback instructions
            ```

            **@claude validate [layer-path]**
            ```bash
            cd [layer-path]
            source ~/.leverage-venv/bin/activate
            leverage tofu init -no-color
            leverage tofu validate -no-color
            leverage tofu fmt -check -recursive
            # Post validation results
            ```

            #### 2. ANALYSIS OPERATIONS

            **@claude analyze** - Analyze PR changes with specialized agent
            **@claude security** - Run security scans (Checkov)
            **@claude cost** - Estimate infrastructure costs

            #### 3. GENERAL OPERATIONS

            **@claude help** - Show available commands
            **@claude review** - Trigger code review

            ### YOUR TASK:

            1. **Parse the comment** to extract:
               - Command type (plan, apply, validate, analyze, etc.)
               - Target layer path (if specified)
               - Additional parameters

            2. **Execute the appropriate operation**:
               - For infrastructure ops: Use Bash to run Leverage CLI commands
               - For analysis: Route to specialized agent using Task tool
               - For general: Provide helpful response

            3. **Route to specialized agent if needed**:
               - Analyze context (layer path, resource types, keywords)
               - Select appropriate agent (security-compliance, terraform-layer, etc.)
               - Delegate using Task tool with subagent_type

            4. **Post results** using:
               ```bash
               gh pr comment ${{ github.event.issue.number }} --body '[your results]'
               ```

            ### SAFETY RULES FOR APPLY OPERATIONS:

            1. ✅ Always run plan before apply
            2. ✅ Check for drift (unexpected changes)
            3. ✅ Generate rollback plan after apply
            4. ✅ Upload rollback as artifact
            5. ✅ Include rollback instructions in comment
            6. ⚠️ Warn if destructive changes detected
            7. ⚠️ Request confirmation if high-risk changes

            ### EXAMPLE WORKFLOWS:

            **Example 1: @claude apply apps-devstg/us-east-1/secrets**
            1. cd to layer directory
            2. Run init + plan
            3. Check plan for issues
            4. Run apply
            5. Generate rollback plan
            6. Post results + rollback info

            **Example 2: @claude analyze this PR**
            1. Detect changed layers
            2. Route to appropriate agent based on layer type
            3. Agent performs specialized analysis
            4. Post comprehensive review

            **Example 3: @claude validate apps-devstg/us-east-1/k8s-eks**
            1. cd to layer
            2. Run init + validate + fmt check
            3. Post validation results

            ### ERROR HANDLING:

            - If layer path not found: Ask user to provide correct path
            - If AWS credentials fail: Report auth issue
            - If plan shows errors: Report and do not proceed with apply
            - If state locked: Report lock info and suggest resolution

            Now execute the requested operation based on the comment above.

          claude_args: '--allowed-tools "Bash(*),Read(**),Write(**),Edit(**),Glob(**),Grep(**),Task(*),TodoWrite(*)"'