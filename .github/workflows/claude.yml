name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    timeout-minutes: 30
    concurrency:
      group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.run_id }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for Claude to make code changes
      pull-requests: write  # Required for Claude to comment and create PRs
      issues: write  # Required for Claude to comment on issues
      id-token: write
      actions: read  # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Add reaction to show processing
        if: github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const reaction = github.event_name === 'issue_comment' ?
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              }) :
              await github.rest.reactions.createForPullRequestReviewComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: 'eyes'
              });

      - name: Run Claude Code with Intelligent Agent Routing
        id: claude
        uses: anthropics/claude-code-action@v1.0.0
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Intelligent Agent Routing System
          prompt: |
            You are Claude Code with access to specialized agents for the Binbash Leverage Reference Architecture.

            ## INTELLIGENT AGENT ROUTING

            Before handling any request, you MUST:

            1. **ANALYZE CONTEXT** - Examine:
               - File paths and directories being worked on
               - Layer types (security-*, cost-*, k8s-*, databases-*, etc.)
               - Keywords in PR titles, issue descriptions, comments
               - Type of operation requested (fix, feature, documentation, etc.)

            2. **SELECT SPECIALIZED AGENT** - Based on analysis, choose the most appropriate agent:
               - **security-compliance**: For security layers, secrets-manager, iam, kms, compliance
               - **cost-optimization**: For cost analysis, billing, infracost, resource optimization
               - **terraform-layer**: For general infrastructure, .tf files, layer operations
               - **feature-implementation**: For new features, enhancements, development
               - **issue-fix**: For bugs, errors, troubleshooting, fixes
               - **documentation**: For .md files, README, guides, documentation
               - **dependency-update**: For version updates, renovate, security patches

            3. **USE TASK TOOL** - Delegate to the selected specialized agent:
               ```
               Task tool with subagent_type: [selected-agent]
               ```

            4. **PROVIDE REASONING** - Briefly explain why you selected that specific agent.

            ## AGENT SELECTION EXAMPLES

            - Working on `apps-devstg/us-east-1/secrets-manager/` → Use `security-compliance`
            - Infracost analysis or cost optimization → Use `cost-optimization`
            - General .tf file changes or layer operations → Use `terraform-layer`
            - Bug fixes or error resolution → Use `issue-fix`
            - Documentation updates → Use `documentation`

            ## REFERENCE GUIDE

            Read `.claude/docs/agent-guide.md` for detailed agent selection criteria.

            ## INSTRUCTIONS

            1. Always analyze context first
            2. Select the most appropriate specialized agent
            3. Use the Task tool to delegate with proper subagent_type
            4. Let the specialized agent handle the specific expertise
            5. Provide clear reasoning for your agent selection

            This intelligent routing ensures each request gets specialized expertise without rigid if/else logic.

          # Configure Claude with advanced options
          claude_args: |
            --max-turns 15
            --allowed-tools "Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr comment:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*),Bash(git:*),Bash(find:*),Bash(grep:*),Bash(cat:*),Bash(ls:*)"
